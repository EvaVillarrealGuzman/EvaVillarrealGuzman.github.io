<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-28T17:29:14-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Eva Villarreal Guzmán</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Eva Villarreal Guzmán</name></author><entry><title type="html">Better React code</title><link href="http://localhost:4000/react/2022/04/15/better-react-code.html" rel="alternate" type="text/html" title="Better React code" /><published>2022-04-15T00:00:00-03:00</published><updated>2022-04-15T00:00:00-03:00</updated><id>http://localhost:4000/react/2022/04/15/better-react-code</id><content type="html" xml:base="http://localhost:4000/react/2022/04/15/better-react-code.html"><![CDATA[<p>This post is a compilation of my learnings in React, while I gained experience, that allowed me to write  code in a more maintainable, readable and reusable way. We’ll look at React techniques and conventions, as well as anti-patterns, such as using indexes as key and spreading properties on DOM elements, which should be avoided.</p>

<h2 id="multiline">Multiline</h2>

<p>Whenever we have nested elements, we should always go multiline:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span> 
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nc">Main</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span> <span class="p">/&gt;</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This is preferable to the following:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;</span><span class="nc">Header</span> <span class="p">/&gt;&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;</span><span class="nc">Main</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span> <span class="p">/&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>The exception is if the children are not elements such as text or variables. In that case, it makes sense to remain on the same line and avoid adding noise to the markup, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">Alert</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Alert</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>Close<span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Always remember to wrap your elements inside parentheses when you write them on multiple lines. JSX always gets replaced by functions, and functions written on a new line can give you an unexpected result because of automatic semicolon insertion. Suppose, for example, that you are returning JSX from your render method, which is how you create UIs in React.</p>

<p>The following example works fine because the div element is on the same line as the return:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>The following, however, is not right:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> 
  <span class="p">&lt;</span><span class="nt">div</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>You can wrap the statement in parentheses, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span> 
  <span class="p">&lt;</span><span class="nt">div</span> <span class="p">/&gt;</span> 
<span class="p">)</span>
</code></pre></div></div>

<h2 id="multi-properties">Multi-properties</h2>

<p>A common problem in writing JSX comes when an element has multiples attributes. One solution is to write all the attributes on the same line, but this would lead to very long lines that we do not want in our code.</p>

<p>A common solution is to write each attribute on a new line, with one level of indentation, and then align the closing bracket with the opening tag:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">button</span> 
  <span class="na">foo</span><span class="p">=</span><span class="s">"bar"</span> 
  <span class="na">veryLongPropertyName</span><span class="p">=</span><span class="s">"baz"</span> 
  <span class="na">onSomething</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSomething</span><span class="si">}</span> 
<span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="conditionals">Conditionals</h2>

<p>We use conditionals when, for example, we want to render some components only when certain conditions are matched. There are many different ways to express conditions in JSX, and it is important to understand the benefits and problems of each one of these to write code that is both readable and maintainable.</p>

<p>Suppose we want to show a logout button only if the user is currently logged in to our application.</p>

<p>A simple snippet to start with is as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">button</span>
  
<span class="k">if</span> <span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">)</span> <span class="p">{</span> 
  <span class="nx">button</span> <span class="o">=</span> <span class="p">&lt;</span><span class="nc">LogoutButton</span> <span class="p">/&gt;</span>
<span class="p">}</span> 
  
<span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">button</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This works, but it is not very readable, especially if there are multiple components and multiple conditions.</p>

<p>In JSX, we can use an inline condition:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
  <span class="si">{</span><span class="nx">isLoggedIn</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">LoginButton</span> <span class="p">/&gt;</span><span class="si">}</span> 
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This works because if the condition is false, nothing gets rendered, but if the condition is true, the createElement function of LoginButton gets called, and the element is returned to compose the resulting tree.</p>

<p>If the condition has an alternative (the classic if…else statement) and we want, for example, to show a logout button if the user is logged in and a login button otherwise, we can use JavaScript’s if…else statement as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">button</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">)</span> <span class="p">{</span> 
  <span class="nx">button</span> <span class="o">=</span> <span class="p">&lt;</span><span class="nc">LogoutButton</span> <span class="p">/&gt;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
  <span class="nx">button</span> <span class="o">=</span> <span class="p">&lt;</span><span class="nc">LoginButton</span> <span class="p">/&gt;</span>
<span class="p">}</span> 
  
<span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">button</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Alternatively, and better still, we can use a ternary condition that makes the code more compact:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
  <span class="si">{</span><span class="nx">isLoggedIn</span> <span class="p">?</span> <span class="p">&lt;</span><span class="nc">LogoutButton</span> <span class="p">/&gt;</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nc">LoginButton</span> <span class="p">/&gt;</span><span class="si">}</span> 
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Let’s now look at the best solution for when things get more complicated and, for example, we have to check more than one variable to determine whether to render a component or not:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="si">{</span><span class="nx">dataIsReady</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">userHasPermissions</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="p">&lt;</span><span class="nc">SecretData</span> <span class="p">/&gt;</span>
  <span class="si">}</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>In this case, it is clear that using the inline condition is a good solution, but the readability is strongly impacted. Instead, we can create a helper function inside our component and use it in JSX to verify the condition:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canShowSecretData</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">dataIsReady</span><span class="p">,</span> <span class="nx">isAdmin</span><span class="p">,</span> <span class="nx">userHasPermissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>
  <span class="k">return</span> <span class="nx">dataIsReady</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">userHasPermissions</span><span class="p">)</span>
<span class="p">}</span> 
  
<span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">canShowSecretData</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">SecretData</span> <span class="p">/&gt;</span><span class="si">}</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<p>As you can see, this change makes the code more readable and the condition more explicit.</p>

<p>The same applies to computed properties. Suppose you have two single properties for currency and value. Instead of creating the price string inside render, you can create a function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getPrice</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">currency</span><span class="p">}${</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span>
<span class="p">}</span>
   
<span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">getPrice</span><span class="p">()</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This is better because it is isolated and you can easily test it if it contains logic.</p>

<h3 id="external-solutions">External solutions</h3>

<p><strong>A good practice is to avoid external dependencies as much as we can to keep our bundle smaller, but it may be worth it in this particular case because improving the readability of our templates is a big win.</strong> We will see different external solutions:</p>

<h4 id="render-if">render-if</h4>

<p>We can install with the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save render-if
</code></pre></div></div>

<p>We can then easily use it in our projects, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">dataIsReady</span><span class="p">,</span> <span class="nx">isAdmin</span><span class="p">,</span> <span class="nx">userHasPermissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>

<span class="kd">const</span> <span class="nx">canShowSecretData</span> <span class="o">=</span> <span class="nx">renderIf</span><span class="p">(</span> 
  <span class="nx">dataIsReady</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">userHasPermissions</span><span class="p">)</span> 
<span class="p">);</span>
   
<span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="si">{</span><span class="nx">canShowSecretData</span><span class="p">(&lt;</span><span class="nc">SecretData</span> <span class="p">/&gt;)</span><span class="si">}</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
<span class="p">);</span>
</code></pre></div></div>

<p>Here, we wrap our conditions inside the renderIf function.</p>

<p>The utility function that gets returned can be used as a function that receives the JSX markup to be shown when the condition is true.</p>

<p>One goal is to never add too much logic inside our components. Some of them will require a bit of it, but we should try to keep them as simple as possible so that we can easily spot and fix errors.</p>

<h4 id="jsx-only-if">jsx-only-if</h4>

<p><code class="language-plaintext highlighter-rouge">jsx-only-if</code> lets us write our components as if the condition is always true by setting the conditional function using a Higher-Order Component (HOC).</p>

<p>To use the library, we need to install it as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save react-only-if
</code></pre></div></div>

<p>Once it is installed, we can use it in our apps in the following way:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">onlyIf</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-only-if</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">SecretDataOnlyIf</span> <span class="o">=</span> <span class="nx">onlyIf</span><span class="p">(</span>
  <span class="p">({</span> <span class="nx">dataIsReady</span><span class="p">,</span> <span class="nx">isAdmin</span><span class="p">,</span> <span class="nx">userHasPermissions</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">dataIsReady</span> <span class="o">&amp;&amp;</span> 
  <span class="p">(</span><span class="nx">isAdmin</span> <span class="o">||</span> <span class="nx">userHasPermissions</span><span class="p">)</span>
<span class="p">)(</span><span class="nx">SecretData</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">SecretDataOnlyIf</span> 
      <span class="na">dataIsReady</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span>
      <span class="na">isAdmin</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span>
      <span class="na">userHasPermissions</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span>
    <span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">)</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyComponent</span>
</code></pre></div></div>

<p>As you can see here, there is no logic at all inside the component itself.</p>

<p>We pass the condition as the first parameter of the onlyIf function, and when the condition is matched, the component is rendered.</p>

<p>The function used to validate the condition receives the props, state, and context of the component.</p>

<p>In this way, we avoid polluting our component with conditionals so that it is easier to understand and reason about.</p>

<h4 id="jsx-control-statements">jsx-control-statements</h4>

<p>This follows the same philosophy as JSX, and it does not add any real functionality to the language; it is just syntactic sugar that gets compiled into JavaScript. This is a Babel Plugin.</p>

<p>Wwe have to install it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save jsx-control-statements
</code></pre></div></div>

<p>Once it is installed, we have to add it to the list of our Babel plugins in our <code class="language-plaintext highlighter-rouge">.babelrc</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"plugins": ["jsx-control-statements"]
</code></pre></div></div>

<p>From now on, we can use the syntax provided by the plugin and Babel will transpile it together with the common JSX syntax.</p>

<p>A conditional statement written using the plugin looks like the following snippet:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">If</span> <span class="na">condition</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">canShowSecretData</span><span class="si">}</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">SecretData</span> <span class="p">/&gt;</span> 
<span class="p">&lt;/</span><span class="nc">If</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This gets transpiled into a ternary expression as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nx">canShowSecretData</span> <span class="p">?</span> <span class="p">&lt;</span><span class="nc">SecretData</span> <span class="p">/&gt;</span> <span class="p">:</span> <span class="kc">null</span><span class="p">}</span>
</code></pre></div></div>

<p>The If component is great, but if, for some reason, you have nested conditions in your render method, it can easily become messy and hard to follow. This is where the Choose component comes in handy:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Choose</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">When</span> <span class="na">condition</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>if<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nc">When</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">When</span> <span class="na">condition</span><span class="p">=</span><span class="si">{</span><span class="p">...</span><span class="si">}</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>else if<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nc">When</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">Otherwise</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>else<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nc">Otherwise</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nc">Choose</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Please note that the preceding code gets transpiled into multiple ternaries.</p>

<p>Finally, there is a component (always remember that we are not talking about real components but just syntactic sugar) to manage the loops that is also very convenient:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nc">For</span> <span class="na">each</span><span class="p">=</span><span class="s">"user"</span> <span class="na">of</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">users</span><span class="si">}</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nc">For</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>The preceding code gets transpiled into a map function – no magic there.</p>

<p>If you are used to using linters, you might wonder why the linter is not complaining about that code. The user variable does not exist before the transpilation, nor is it wrapped in a function. To avoid those linting errors, there is another plugin to install: <code class="language-plaintext highlighter-rouge">eslint-plugin-jsx-control-statements</code>.</p>

<h2 id="object-destructuring">Object Destructuring</h2>

<p>Destructuring is often the case that you have to access plenty of properties from your state or props in your component. Rather than assigning them to a variable one by one like the following example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">ID</span><span class="p">:</span> <span class="dl">'</span><span class="s1">21</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ana</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">student</span><span class="p">.</span><span class="nx">ID</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">student</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</code></pre></div></div>

<p>You can use destructuring assignment in JavaScript:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">ID</span><span class="p">:</span> <span class="dl">'</span><span class="s1">21</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ana</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="p">{</span><span class="nx">ID</span><span class="p">,</span> <span class="nx">name</span><span class="p">}</span> <span class="o">=</span> <span class="nx">student</span><span class="p">;</span>
</code></pre></div></div>

<p>You can list the properties you want inside the curly brackets and even rename them using aliases like this:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">ID</span><span class="p">:</span> <span class="dl">'</span><span class="s1">21</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ana</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nx">n</span><span class="p">}</span> <span class="o">=</span> <span class="nx">student</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</code></pre></div></div>

<p>That’s especially beneficial for functional stateless components because they always receive the props object in their function signature. Often you will not use the props but its content, so you can destructure the content already in the function signature.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// no destructuring</span>
<span class="kd">function</span> <span class="nx">Greeting</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">greeting</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;;</span>
<span class="p">}</span>

<span class="c1">// destructuring</span>
<span class="kd">function</span> <span class="nx">Greeting</span><span class="p">({</span> <span class="nx">greeting</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">greeting</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Another great feature is the <strong>rest destructuring</strong>. It is often used for splitting out a part of an object, but keeping the remaining properties in another object.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// rest destructuring</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">users</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="react-state">React State</h3>

<p>useState hook will takes an initial state as an argument and the function will return an array with two values. The first value represents the current state; the second value is a function to update this state.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">stories</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">];</span>

  <span class="c1">// less readable version without array destructuring</span>
  <span class="kd">const</span> <span class="nx">searchTermState</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">searchTerm</span> <span class="o">=</span> <span class="nx">searchTermState</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="kd">const</span> <span class="nx">setSearchTerm</span> <span class="o">=</span> <span class="nx">searchTermState</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Consider using JavaScript array destructuring in React’s useState hook:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">stories</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">];</span>


  <span class="kd">const</span> <span class="p">[</span><span class="nx">searchTerm</span><span class="p">,</span> <span class="nx">setSearchTerm</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

  <span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="spread-operator">Spread Operator</h2>

<p>Spread Operator literally spreads the contents of an array into its elements which makes operations like concatenation etc. easier. You can clone arrays using this operator.</p>

<p>Let’s say we want to concatenate two arrays, we can do this in different ways:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// using concat function</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">c: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">c</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// using Spread operator</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">c</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span><span class="p">];</span> <span class="c1">//spread operator</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">c: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">c</span><span class="p">);</span>
</code></pre></div></div>

<p>You can easily add some elements in the middle of the two arrays: <code class="language-plaintext highlighter-rouge">[...a, 'something', ...b];</code></p>

<p>In React, you can combine two objects using Spread Operator and add extra properties to that object too, like this:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jhon</span><span class="dl">"</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="dl">"</span><span class="s2">21</span><span class="dl">"</span><span class="p">,</span> <span class="na">GPA</span><span class="p">:</span> <span class="dl">"</span><span class="s2">3.0</span><span class="dl">"</span><span class="p">};</span>

<span class="kd">const</span> <span class="nx">new_object</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">person</span><span class="p">,</span> <span class="p">...</span><span class="nx">student</span><span class="p">,</span> <span class="na">semester</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">new_object</span><span class="p">);</span> <span class="c1">//output: { name: 'Jhon', ID: '21', GPA: '3.0', semester: '3' }</span>
</code></pre></div></div>

<h3 id="spreading-properties-on-dom-elements">Spreading properties on DOM elements</h3>

<p>We usually spread the properties to the elements to avoid writing every single one manually, which is shown as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>This works very well and it gets transpiled into the following code by Babel:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">_jsx</span><span class="p">(</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span>
</code></pre></div></div>

<p>However, when we spread properties into a DOM element, we run the risk of adding unknown HTML attributes, which is bad practice.</p>

<p>The problem is not related only to the spread operator; passing non-standard properties one by one leads to the same issues and warnings. Since the spread operator hides the single properties we are spreading, it is even harder to figure out what we are passing to the element.</p>

<p>To see the warning in the console, a basic operation we can do is render the following component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Spread</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="na">foo</span><span class="p">=</span><span class="s">"bar"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>The message we get looks like the following because the foo property is not valid for a div element:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Unknown</span> <span class="nx">prop</span> <span class="s2">`foo`</span> <span class="nx">on</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span> <span class="nx">tag</span><span class="p">.</span> <span class="nx">Remove</span> <span class="k">this</span> <span class="nx">prop</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">element</span>
</code></pre></div></div>

<p>In this case, as we said, it is easy to figure out which attribute we are passing and remove it, but if we use the spread operator, as in the following example, we cannot control which properties are passed from the parent:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Spread</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<p>If we use the component in the following way, there are no issues:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Spread</span> <span class="na">className</span><span class="p">=</span><span class="s">"foo"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>This, however, is not the case if we do something such as the following. React complains because we are applying a non-standard attribute to the DOM element:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Spread</span> <span class="na">foo</span><span class="p">=</span><span class="s">"bar"</span> <span class="na">className</span><span class="p">=</span><span class="s">"baz"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>One solution we can use to solve this problem is to create a property called <code class="language-plaintext highlighter-rouge">domProps</code> that we can spread safely to the component because we are explicitly saying that it contains valid DOM properties.</p>

<p>For example, we can change the Spread component in the following way:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Spread</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="p">.</span><span class="nx">domProps</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>We can then use it as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Spread</span> <span class="na">foo</span><span class="p">=</span><span class="s">"bar"</span> <span class="na">domProps</span><span class="p">=</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>With React, <strong>it’s always good practice to be explicit.</strong></p>

<h2 id="arrow-functions-in-react">Arrow Functions in React</h2>

<p>Arrow Functions are a more concise and readable way of writing a function in JavaScript. They are frequently used in React to make things more efficient and simpler.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript ES5 function</span>
<span class="kd">function</span> <span class="nx">getGreetingFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">Welcome to JavaScript</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// JavaScript ES6 arrow function with body</span>
<span class="kd">const</span> <span class="nx">getGreetingArrow1</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">Welcome to JavaScript</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// JavaScript ES6 arrow function without body and implicit return</span>
<span class="kd">const</span> <span class="nx">getGreetingArrow2</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
  <span class="dl">'</span><span class="s1">Welcome to JavaScript</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getGreetingFunc</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getGreetingArrow1</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getGreetingArrow2</span><span class="p">());</span>
</code></pre></div></div>

<p>Another example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript ES5 function</span>
<span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">false</span><span class="p">},</span> 
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">presentStudents</span> <span class="o">=</span> <span class="nx">students</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">student</span><span class="p">){</span><span class="k">return</span> <span class="nx">student</span><span class="p">.</span><span class="nx">present</span><span class="p">;});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">presentStudents</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript ES6 arrow function</span>
<span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">ID</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">present</span><span class="p">:</span> <span class="kc">false</span><span class="p">},</span> 
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">presentStudents</span> <span class="o">=</span> <span class="nx">students</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">student</span> <span class="o">=&gt;</span> <span class="nx">student</span><span class="p">.</span><span class="nx">present</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">presentStudents</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="higher-order-functions-in-react">Higher-Order Functions in React</h2>

<p>Higher-order functions allows extracting functions. In this way, you make function testable in isolation from the React component.</p>

<p>For example, if we have to rendered list of users can be filtered based on the value of an input field:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>  
    
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">query</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="p">};</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">onChange</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">query</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
  <span class="p">}</span>
  
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Elsa</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Juan</span><span class="dl">'</span> <span class="p">},</span>
    
    <span class="p">];</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span> <span class="nx">users</span>
            <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">query</span> <span class="o">===</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">myuser</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">myuser</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;)</span>
          <span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span>
          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
          <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span>
        <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The doFilter() function can be exported from the file and tested in isolation as pure (higher-order) function.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">doFilter</span> <span class="o">=</span> <span class="nx">query</span> <span class="o">=&gt;</span> <span class="nx">user</span> <span class="o">=&gt;</span>
   <span class="nx">query</span> <span class="o">===</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>  
    
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">query</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="p">};</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">onChange</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">query</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
  <span class="p">}</span>
  
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Elsa</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Juan</span><span class="dl">'</span> <span class="p">},</span>
    
    <span class="p">];</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span> <span class="nx">users</span>
            <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">doFilter</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">query</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">myuser</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">myuser</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;)</span>
          <span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span>
          <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
          <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span>
        <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="map-reduce--filter-in-react">Map, Reduce &amp; Filter in React</h2>

<p>A very common operation in UI development is to display lists of items. When it comes to showing lists, using JavaScript as a template language is a very good idea.</p>

<p>If we write a function that returns an array inside our JSX template, each element of the array gets compiled into an element.</p>

<p>We can use any JavaScript expressions inside curly braces, and the most common way to generate an array of elements, given an array of objects, is to use map.</p>

<p>For example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Víctor</span><span class="dl">'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Milagros</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">];</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
           <span class="si">{</span><span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;)</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The same can be applied for custom-tailored cases where filter() or reduce() make more sense rather than rendering an output for each mapped item.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Víctor</span><span class="dl">'</span><span class="p">,</span> <span class="na">isDeveloper</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Milagros</span><span class="dl">'</span><span class="p">,</span> <span class="na">isDeveloper</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Julieta</span><span class="dl">'</span><span class="p">,</span> <span class="na">isDeveloper</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
    <span class="p">];</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">users</span>
          <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">isDeveloper</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;)</span>
        <span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="sub-rendering">Sub-rendering</h2>

<p>It is worth stressing that we always want to keep our components very small and our render methods very clean and simple.</p>

<p>However, that is not an easy goal, especially when you are creating an application iteratively, and in the first iteration, you are not sure exactly how to split the components into smaller ones. So, what should we be doing when the render method becomes too big to maintain? One solution is to split it into smaller functions in a way that lets us keep all the logic in the same component.</p>

<p>Let’s look at an example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">renderUserMenu</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="c1">// JSX for user menu </span>
<span class="p">}</span> 
   
<span class="kd">const</span> <span class="nx">renderAdminMenu</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="c1">// JSX for admin menu </span>
<span class="p">}</span> 
   
<span class="k">return</span> <span class="p">(</span> 
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome back!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span> 
    <span class="si">{</span><span class="nx">userExists</span> <span class="o">&amp;&amp;</span> <span class="nx">renderUserMenu</span><span class="p">()</span><span class="si">}</span> 
    <span class="si">{</span><span class="nx">userIsAdmin</span> <span class="o">&amp;&amp;</span> <span class="nx">renderAdminMenu</span><span class="p">()</span><span class="si">}</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
<span class="p">)</span>
</code></pre></div></div>

<p>This is not always considered best practice because it seems more obvious to split the component into smaller ones. However, sometimes it helps to keep the render method cleaner.</p>

<h2 id="using-indexes-as-a-key">Using indexes as a key</h2>

<p>The key property uniquely identifies an element in the DOM, and React uses it to check whether the element is new or whether it has to be updated when the component properties or state change.</p>

<p>Using keys is always a good idea and if you don’t do it, React gives a warning in the console (in development mode). However, it is not simply a matter of using a key; sometimes, the value that we decide to use as a key can make a difference. In fact, using the wrong key can give us unexpected behaviors in some instances. In this section, we will see one of those instances.</p>

<p>Let’s create a List component, as shown here:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FC</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">List</span><span class="p">:</span> <span class="nx">FC</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">List</span>
</code></pre></div></div>

<p>Then we define our state:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">setItems</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">])</span>
</code></pre></div></div>

<p>The implementation of the click handler insert a new item at the top of the list:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="kd">const</span> <span class="nx">newItems</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
  <span class="nx">newItems</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="dl">'</span><span class="s1">baz</span><span class="dl">'</span><span class="p">)</span>

  <span class="nx">setItems</span><span class="p">(</span><span class="nx">newItems</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, in render, we show the list and the + button to add the <code class="language-plaintext highlighter-rouge">baz</code> item at the top of the list:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span> 
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span> 
      <span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span> 
        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">index</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span> 
      <span class="p">))</span><span class="si">}</span> 
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span> 

    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
<span class="p">)</span> 
</code></pre></div></div>

<p>If you run the component inside the browser, you will not see any problems; clicking the + button inserts a new item at the top of the list.</p>

<p>Let’s change render in the following way, adding an input field near each item. We then use an input field because we can edit its content, making it easier to figure out the problem:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span> 
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span> 
      <span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span> 
        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">index</span><span class="si">}</span><span class="p">&gt;</span> 
          <span class="si">{</span><span class="nx">item</span><span class="si">}</span> 
          <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span> 
        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span> 
      <span class="p">))</span><span class="si">}</span> 
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> 
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
<span class="p">)</span>
</code></pre></div></div>

<p>If we run this component again in the browser, copy the values of the items in the input fields, and then click +, we will get unexpected behavior. The items shift down while the input elements remain in the same position, in such a way that their value does not match the value of the items anymore.</p>

<p>What we can see is that React, instead of inserting the new element on top, swaps the text of the two existing elements, and inserts the last item at the bottom as if it was new. The reason it does that is that we are using the index of the map function as the key.</p>

<p>In fact, the index always starts from 0, even if we push a new item to the top of the list, so React thinks that we changed the values of the existing two, and added a new element at index 2. The behavior is the same as it would have been without using the key property at all.</p>

<p>This is a very common pattern because we may think that providing any key is always the best solution, but it is not like that at all. <strong>The key has to be unique and stable, identifying one, and only one, item.</strong></p>

<p>To solve this problem, we can, for example, use the value of the item if we expect it not to be repeated within the list, or create a unique identifier.</p>

<h2 id="handler-function-in-jsx">Handler Function in JSX</h2>

<p>The <strong>synthetic event</strong> is a wrapper around the browser’s native event, with more functions that are useful to prevent native browser behavior (e.g. refreshing a page after the user clicks a form’s submit button). Always pass functions to these handlers, not the return value of the function, except when the return value is a function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// don't do this</span>
<span class="p">&lt;</span><span class="nt">input</span>
  <span class="na">id</span><span class="p">=</span><span class="s">"search"</span>
  <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
  <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="p">()</span><span class="si">}</span>
<span class="p">/&gt;</span>

<span class="c1">// do this instead</span>
<span class="p">&lt;</span><span class="nt">input</span>
  <span class="na">id</span><span class="p">=</span><span class="s">"search"</span>
  <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
  <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="callback-handlers-in-jsx">Callback Handlers in JSX</h2>

<p>There is no way to pass information as JavaScript data types up the component tree, since props are naturally only passed downwards. However, we can introduce a callback handler as a function.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">stories</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">];</span>

  <span class="c1">// Callback function gets introduced</span>
  <span class="kd">const</span> <span class="nx">handleSearch</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Callback function is used elsewhere </span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>


  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>My Hacker Stories<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nc">Search</span> <span class="na">onSearch</span><span class="p">=</span><span class="si">{</span><span class="nx">handleSearch</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">hr</span> <span class="p">/&gt;</span>

      <span class="p">&lt;</span><span class="nc">List</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">stories</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">Search</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">searchTerm</span><span class="p">,</span> <span class="nx">setSearchTerm</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handleChange</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setSearchTerm</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

    <span class="c1">//  It “calls back” to the place it was introduced</span>
    <span class="nx">props</span><span class="p">.</span><span class="nx">onSearch</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>

  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span> <span class="p">...</span> <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="inline-handler-in-jsx">Inline Handler in JSX</h2>

<p>Inline handlers allow us to execute the function right in the JSX. There are two solutions using the incoming function in the Item component as an inline handler. First, using JavaScript’s bind method:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">onRemoveItem</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">num_comments</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">points</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="p">=</span><span class="s">"button"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onRemoveItem</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        Dismiss
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Using JavaScript’s bind method on a function allows us to bind arguments directly to that function that should be used when executing it. The bind method returns a new function with the bound argument attached.</p>

<p>The second and more popular solution is to use a wrapping arrow function, which allows us to sneak in arguments like item:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">onRemoveItem</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">num_comments</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">points</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="p">=</span><span class="s">"button"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">onRemoveItem</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        Dismiss
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This is a quick solution because sometimes we don’t want to refactor a function component’s concise function body back to a block body to define an appropriate handler between function signature and return statement. While this way is more concise than the others, it can also be more difficult to debug because JavaScript logic may be hidden in JSX. It becomes even more verbose if the wrapping arrow function encapsulates more than one line of implementation logic, by using a block body instead of a concise body. This should be avoided:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">onRemoveItem</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    ...
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span>
        <span class="na">type</span><span class="p">=</span><span class="s">"button"</span>
        <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="c1">// do something else</span>

          <span class="c1">// note: avoid using complex logic in JSX</span>

          <span class="nx">onRemoveItem</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
        <span class="p">}</span><span class="si">}</span>
      <span class="p">&gt;</span>
        Dismiss
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>All three handler versions, two of which are inline and the normal handler, are acceptable. The non-inlined handler moves the implementation details into the function component’s block body; the inline handler move the implementation details into the JSX.</p>

<h2 id="react-fragments">React Fragments</h2>

<p>A fragment wraps other elements into a single top-level element without adding to the rendered output. If you prefer to omit the wrapping <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> elements, substitute them with an empty tag that is allowed in JSX, and doesn’t introduce intermediate elements in our rendered HTML.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Search</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">search</span><span class="p">,</span> <span class="nx">onSearch</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
 <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>

   <span class="p">&lt;</span><span class="nt">label</span> <span class="na">htmlFor</span><span class="p">=</span><span class="s">"search"</span><span class="p">&gt;</span>Search: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
   <span class="p">&lt;</span><span class="nt">input</span>
     <span class="na">id</span><span class="p">=</span><span class="s">"search"</span>
     <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
     <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">search</span><span class="si">}</span>
     <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onSearch</span><span class="si">}</span>
   <span class="p">/&gt;</span>

 <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">);</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Search</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">search</span><span class="p">,</span> <span class="nx">onSearch</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
 <span class="p">&lt;&gt;</span>
   <span class="p">&lt;</span><span class="nt">label</span> <span class="na">htmlFor</span><span class="p">=</span><span class="s">"search"</span><span class="p">&gt;</span>Search: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
   <span class="p">&lt;</span><span class="nt">input</span>
     <span class="na">id</span><span class="p">=</span><span class="s">"search"</span>
     <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
     <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">search</span><span class="si">}</span>
     <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onSearch</span><span class="si">}</span>
   <span class="p">/&gt;</span>
 <span class="p">&lt;/&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="creating-enum-types--using-symbols">Creating enum Types  using Symbols</h2>

<p>Enums allow you to define constants with semantic names and unique values. Given that the values of symbols are different, they make excellent values for enumerated types.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">directions</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">UP</span>   <span class="p">:</span> <span class="nb">Symbol</span><span class="p">(</span> <span class="dl">'</span><span class="s1">UP</span><span class="dl">'</span> <span class="p">),</span>
    <span class="na">DOWN</span> <span class="p">:</span> <span class="nb">Symbol</span><span class="p">(</span> <span class="dl">'</span><span class="s1">DOWN</span><span class="dl">'</span> <span class="p">),</span>
    <span class="na">LEFT</span> <span class="p">:</span> <span class="nb">Symbol</span><span class="p">(</span> <span class="dl">'</span><span class="s1">LEFT</span><span class="dl">'</span> <span class="p">),</span>
    <span class="na">RIGHT</span><span class="p">:</span> <span class="nb">Symbol</span><span class="p">(</span> <span class="dl">'</span><span class="s1">RIGHT</span><span class="dl">'</span> <span class="p">)</span>
<span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">directions</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="use-typescript">Use Typescript</h2>

<p>TypeScript is a superset of JavaScript which means that any feature in JavaScript is available in TypeScript.</p>

<p>The most prominent feature unique to TypeScript—the one that gave TypeScript its name—is, as noted, strong typing: a TypeScript variable is associated with a type that tells the compiler what kind of data it can hold. In addition, TypeScript does support type inference, and includes a catch-all any type, which means that variables don’t have to have their types assigned explicitly by the programmer; more on that in a moment.</p>

<h3 id="strongly-typed-function-component-props">Strongly-typed Function Component Props</h3>

<p>React function components are just functions that take in a props parameter and return JSX. We can make them strongly-type function parameters.</p>

<p>Let’s start by adding a type annotation for the props:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">:</span> <span class="p">{</span> <span class="nl">who</span><span class="p">:</span> <span class="nx">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>In this way, we have just made Hello’s props strongly-typed.</p>

<p>Now, we can shorten the Hello component slightly by destructuring the props parameter:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">who</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">who</span><span class="p">:</span> <span class="nx">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Using interface or type alias for the props is arguably more readable when the component has more than a couple of props.</strong> This is also better if the type is referenced elsewhere in the app:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span> <span class="na">who</span><span class="p">:</span> <span class="nx">string</span> <span class="p">}</span>
<span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">who</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Also, our Hello component is an arrow function.</p>

<p>If we have a prop that is optional:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="na">who</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span> 
  <span class="nx">message</span><span class="p">?:</span> <span class="nx">string</span> 
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">who</span><span class="p">,</span> <span class="nx">message</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">message</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>message is <code class="language-plaintext highlighter-rouge">undefined</code> if it hasn’t been passed.</p>

<p>The short circuit operator (&amp;&amp;) is used to render the message only if it has been passed into the component. This is a typical pattern when rendering elements driven by optional props.</p>

<p>We can specifying a default for a function component prop. The first way is to use a static property called <code class="language-plaintext highlighter-rouge">defaultProps</code> on the function component. This is set to an object literal that contains the values to set the props to:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Component</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">prop1</span><span class="p">:</span> <span class="nx">value1</span><span class="p">,</span>
  <span class="na">prop2</span><span class="p">:</span> <span class="nx">value2</span><span class="p">,</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Continuing with the previous example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span> <span class="na">who</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span> <span class="nx">message</span><span class="p">?:</span> <span class="nx">string</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">who</span><span class="p">,</span> <span class="nx">message</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">message</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
<span class="p">);</span>
<span class="nx">Hello</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">How are you?</span><span class="dl">"</span>
<span class="p">};</span>
</code></pre></div></div>

<p>There is another way to provide default prop values to a function component. This approach is to use the standard syntax for default function parameters:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Component</span> <span class="o">=</span> <span class="p">({</span> 
  <span class="nx">prop1</span> <span class="o">=</span> <span class="nx">value1</span><span class="p">,</span>
  <span class="nx">prop2</span> <span class="o">=</span> <span class="nx">value2</span><span class="p">,</span>
  <span class="p">...</span>
<span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div></div>

<p>Refactoring Hello component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span> <span class="na">who</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span> <span class="nx">message</span><span class="p">?:</span> <span class="nx">string</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">who</span><span class="p">,</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">How are you?</span><span class="dl">"</span> <span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="nx">who</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">message</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The default function parameter approach is arguably more readable than the <code class="language-plaintext highlighter-rouge">defaultProps</code> approach for defining default props. This is because the default value is closer to where the prop is defined. So, our eyes don’t need to scan right to the bottom of the component and back up again to fully understand a component’s props. It is also worth noting that <code class="language-plaintext highlighter-rouge">defaultProps</code> may be deprecated in React function components in a future release.</p>

<p>If the who prop is now an object containing name and friend properties and we add a renderMessage prop that is a function, so we can make the definition of the Props as the next:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Who</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">friend</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">who</span><span class="p">:</span> <span class="nx">Who</span><span class="p">;</span>
  <span class="nx">message</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nx">renderMessage</span><span class="p">?:</span> <span class="p">(</span><span class="na">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">who</span><span class="p">,</span>
  <span class="nx">renderMessage</span><span class="p">,</span>
  <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">How are you?</span><span class="dl">"</span>
<span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
      Hello, <span class="si">{</span><span class="nx">who</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span>
      <span class="si">{</span><span class="nx">who</span><span class="p">.</span><span class="nx">friend</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2"> my friend</span><span class="dl">"</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">message</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">renderMessage</span> <span class="p">?</span> <span class="nx">renderMessage</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;)</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>An example consumption of Hello is as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Hello</span>
  <span class="na">who</span><span class="p">=</span>
  <span class="na">message</span><span class="p">=</span><span class="s">"Hey, how are you?"</span>
  <span class="na">renderMessage</span><span class="p">=</span><span class="si">{</span><span class="nx">m</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">i</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">m</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">i</span><span class="p">&gt;</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<p><strong>Summarizing, create strongly-typed function props using the following syntax:</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">param1</span><span class="p">:</span> <span class="nx">Type1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">:</span> <span class="nx">Type2</span><span class="p">,</span> <span class="p">...)</span> <span class="o">=&gt;</span> <span class="nx">ReturnType</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="strongly-typed-function-component-state">Strongly-typed Function Component State</h3>

<h4 id="usestate">useState</h4>

<p>In some cases, TypeScript can infer the type of the state returned from a <code class="language-plaintext highlighter-rouge">useState</code> hook from the initial value. So, state with the <code class="language-plaintext highlighter-rouge">useState</code> hook is automatically strongly-typed.</p>

<p>For the instances when TypeScriptss inference isn’t required, we can explicitly pass the state type into the <code class="language-plaintext highlighter-rouge">useState</code> generic parameter:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[...]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="o">&lt;</span><span class="nx">StateType</span><span class="o">&gt;</span><span class="p">(...);</span>
</code></pre></div></div>

<p>For example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="o">&lt;</span><span class="nx">number</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="usereducer">useReducer</h4>

<p>The <code class="language-plaintext highlighter-rouge">useReducer</code> hook is excellent for implementing complex state scenarios. It uses a Redux like pattern for state management where object literals called actions are passed into a function called a reducer to change state.</p>

<p>Let’s create these below the State type:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Increment</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">readonly</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">increment</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">readonly</span> <span class="na">incrementStep</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">type</span> <span class="nx">Decrement</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">readonly</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">decrement</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">readonly</span> <span class="na">decrementStep</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>So, the actions will have a type property, which uniquely defines the type of action that needs to be performed along with the amount that the counter will need to be incremented or decremented. We have used the <code class="language-plaintext highlighter-rouge">readonly</code> keyword on the action properties so that they are immutable.</p>

<p>Next, we are going to create a union type called Actions from the Increment and Decrement types. This union type will eventually be used as the type for a parameter for the action in the reducer. Let’s add this under the Decrement type:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Actions</span> <span class="o">=</span> <span class="nx">Increment</span> <span class="o">|</span> <span class="nx">Decrement</span><span class="p">;</span>
</code></pre></div></div>

<p>Moving on to the reducer function. Let’s create the function’s signature:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">State</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">Actions</span><span class="p">):</span> <span class="nx">State</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
<span class="p">};</span>
</code></pre></div></div>

<p>Next, we’ll use a switch statement to handle each type of action, returning the new state in each branch:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">State</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">Actions</span><span class="p">):</span> <span class="nx">State</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">increment</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="nx">action</span><span class="p">.</span><span class="nx">incrementStep</span> <span class="p">};</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">decrement</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="nx">action</span><span class="p">.</span><span class="nx">decrementStep</span> <span class="p">};</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We are now going to make the reducer super type-safe by leveraging the never type.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">State</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">Actions</span><span class="p">):</span> <span class="nx">State</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="na">default</span><span class="p">:</span>
      <span class="nx">neverReached</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">neverReached</span> <span class="o">=</span> <span class="p">(</span><span class="nx">never</span><span class="p">:</span> <span class="nx">never</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
</code></pre></div></div>

<p>This allows to the editor reminded us to implement the additional switch branch in the reducer if we don’t implemented. TypeScript will know that there is an action type that we haven’t handled. The <code class="language-plaintext highlighter-rouge">never</code> type in the switch statement’s default branch to tell the TypeScript compiler that this should never be reached:</p>

<p>Now that we have fully implemented the reducer, we can use it within the Counter component using the <code class="language-plaintext highlighter-rouge">useReducer</code> hook.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">initialCount</span> <span class="p">});</span>

  <span class="k">return</span> <span class="p">(</span> <span class="p">...</span> <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The type of state is <code class="language-plaintext highlighter-rouge">State</code> and the type of the dispatch function is <code class="language-plaintext highlighter-rouge">Dispatch&lt;Actions&gt;</code>. TypeScript has cleverly inferred these types. We can explicitly define the types by passing them into the generic parameters of <code class="language-plaintext highlighter-rouge">useReducer</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useReducer</span><span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">Reducer</span><span class="o">&lt;</span><span class="nx">State</span><span class="p">,</span> <span class="nx">Actions</span><span class="o">&gt;&gt;</span><span class="p">(</span>
    <span class="nx">reducer</span><span class="p">,</span> 
    <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">initialCount</span> <span class="p">}</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span> <span class="p">...</span> <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We can complete our first implementation of the Counter component by rendering the current count and dispatching the actions when the buttons are clicked:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">increment</span><span class="dl">"</span><span class="p">,</span> <span class="nx">incrementStep</span> <span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>
        Add <span class="si">{</span><span class="nx">incrementStep</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">decrement</span><span class="dl">"</span><span class="p">,</span> <span class="nx">decrementStep</span> <span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>
        Subtract <span class="si">{</span><span class="nx">decrementStep</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">double</span><span class="dl">"</span> <span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>
        Double
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="strongly-typed-events">Strongly-typed Events</h3>

<p>We have an input with an onChange event handler inline:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">input</span>
  <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
  <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">criteria</span><span class="si">}</span>
  <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setCriteria</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<p>The parameter type for inline event handlers is always inferred correctly. <code class="language-plaintext highlighter-rouge">e</code> is of type <code class="language-plaintext highlighter-rouge">React.ChangeEvent&lt;HTMLInputElement&gt;</code>.</p>

<p>Let’s refactor the implementation to use a named function for the event handler:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Searchbox</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">criteria</span><span class="p">,</span> <span class="nx">setCriteria</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handleChange</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setCriteria</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">input</span>
      <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
      <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">criteria</span><span class="si">}</span>
      <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="si">}</span>
    <span class="p">/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What is the type of <code class="language-plaintext highlighter-rouge">e</code> now? <code class="language-plaintext highlighter-rouge">e</code> is now of type <code class="language-plaintext highlighter-rouge">any</code> because TypeScript can’t infer this. So, our named function event handler is not strongly-typed.</p>

<p>To make handleChange strongly-typed we need to add the parameter type:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">handleChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">setCriteria</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</code></pre></div></div>

<p>So, the type for event props is:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">param1</span><span class="p">:</span> <span class="nx">type1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">:</span> <span class="nx">type2</span><span class="p">,</span> <span class="p">...)</span> <span class="o">=&gt;</span> <span class="k">void</span>
</code></pre></div></div>

<p>Notice that the return type is void, which signifies nothing is returned from the function.</p>

<h3 id="strongly-typed-context">Strongly-typed Context</h3>

<p>React context allows several components in a tree to share some data. It’s more convenient than passing the data via props down the component tree. The context is provided at a point in the component tree, and then all the children of the provider can access the context if they wish.</p>

<p>Let’s start by creating our theme using Reacts createContext function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">defaultTheme</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">useTheme</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">ThemeContext</span><span class="p">);</span>
</code></pre></div></div>

<p>The return type of <code class="language-plaintext highlighter-rouge">useTheme</code> is string because this is the type of the context value. The type for the context is inferred correctly if a sensible default is provided when it is created. If the context is providing values that consumers don’t change, then this is fine. However, what if we want the user to change the theme? In this case, our context would need to provide a function for updating the theme, and this can’t really be provided as a default value.</p>

<p>So, enhancing context is going to be a little more complex:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">ThemeContextType</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">theme</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">setTheme</span><span class="p">:</span> <span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>React’s <code class="language-plaintext highlighter-rouge">createContext</code> function expects us to supply a parameter for initial context value. We can supply a default value for the theme property, but it doesn’t make sense to provide a default implementation for the <code class="language-plaintext highlighter-rouge">setTheme</code> method. So, a simple approach is to pass in <code class="language-plaintext highlighter-rouge">undefined</code> as the initial value:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ThemeContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
</code></pre></div></div>

<p>The type of the context value is inferred to be <code class="language-plaintext highlighter-rouge">undefined</code> if in strict mode or any if not.</p>

<p>So, <code class="language-plaintext highlighter-rouge">ThemeContext</code> isn’t typed as we require at the moment. But <code class="language-plaintext highlighter-rouge">createContext</code> is a generic function. So, we can pass in the type for the Context value as a generic parameter:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="o">&lt;</span><span class="nx">ContextType</span><span class="o">&gt;</span><span class="p">(...)</span>
</code></pre></div></div>

<p>Therefore, we can type our context as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ThemeContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="o">&lt;</span><span class="nx">ThemeContextType</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span><span class="p">(</span>
  <span class="kc">undefined</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="strongly-typed-refs-in-function-components">Strongly-typed refs in function components</h3>

<p>The <code class="language-plaintext highlighter-rouge">useRef</code> hook can be used to access all the properties and methods of an element.</p>

<p>Below is an example of using the useRef hook:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Search</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">input</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">form</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">input</span><span class="si">}</span> <span class="na">type</span><span class="p">=</span><span class="s">"search"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The type of input.current is inferred to be <code class="language-plaintext highlighter-rouge">null</code> if strict mode is on, otherwise it is inferred to be <code class="language-plaintext highlighter-rouge">any</code>.</p>

<p>We can explicitly define the type of the element returned from <code class="language-plaintext highlighter-rouge">useRef</code> by passing a generic type parameter:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">ElementType</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="react" /><category term="react" /><summary type="html"><![CDATA[This post is a compilation of my learnings in React, while I gained experience, that allowed me to write code in a more maintainable, readable and reusable way. We’ll look at React techniques and conventions, as well as anti-patterns, such as using indexes as key and spreading properties on DOM elements, which should be avoided.]]></summary></entry><entry><title type="html">UID/GID in Docker</title><link href="http://localhost:4000/docker/2022/03/16/uid-y-gid-en-Docker.html" rel="alternate" type="text/html" title="UID/GID in Docker" /><published>2022-03-16T00:00:00-03:00</published><updated>2022-03-16T00:00:00-03:00</updated><id>http://localhost:4000/docker/2022/03/16/uid-y-gid-en-Docker</id><content type="html" xml:base="http://localhost:4000/docker/2022/03/16/uid-y-gid-en-Docker.html"><![CDATA[<p>When you are using Docker in development environment and you use some tool that generates files during development, such as  dependecies managment (e.g. npm, composer) or to compile task (e.g. SCSS to CSS), if you try to delete or modify these files generated by the tool, maybe you will find with permission denied.</p>

<p>We’ll try to undertand why this happens and how you can fix it.</p>

<h2 id="the-problem">The problem</h2>

<p>Let’s start with a container that uses composer to manage the project’s dependencies:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 composer require psr/log
</code></pre></div></div>

<p>If you list the folder, you can see that the user who owns the folders/files generated by composer is root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 20K
drwxrwxr-x. 3 eva       eva       4.0K mar  27 18:31 ./
drwxr-xr-x. 7 eva       eva       4.0K mar  27 18:29 ../
drwxr-xr-x. 4 root      root      4.0K mar  27 18:31 vendor/
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root      root        53 mar  27 18:31 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root      root      2.1K mar  27 18:31 composer.lock
</code></pre></div></div>

<p>So if you try to remove/modify it, you’ll get a permissions error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">''</span> <span class="o">&gt;</span> composer.json 
bash: composer.json: Permission denied
</code></pre></div></div>

<p>To undertand why this happens, you need to undertand how Linux map the uid (user identifier) and the gid (group identifier).</p>

<p>The Linux kernel is responsible for managing the uid and gid space, and it is the kernel-level syscalls that are used to determine whether the requested privileges should be granted. For example, when a process attempts to write to a file, the kernel examines the uid and gid that created the process to determine if it has sufficient privileges to modify the file. <strong>The important to grant or not privileges is the uid, not the username</strong>.</p>

<p>When we run docker containers, there’s still uses the same kernel as the host. That is, all the processes running inside the containers share the same kernel of the host kernel. This kernel, as we said before, manages all uid and gid.</p>

<p>So you can’t have different users with the same uid inside different containers. So why can I define different usernames (and group names) between containers that have the same uid (and gid)? This is because <strong>username (and group names) that appear in common Linux tools are not part of the kernel, but are managed by external tools</strong> (/etc/passwd, LDAP, Kerberos , etc.). So you might see different usernames, since both host and containers have their own separate list of users and groups in /etc/passwd and /etc/group respectively, but you can’t have different privileges to the same uid/gid.</p>

<p>Now, why are the folders/files generated by composer owned by root?</p>

<p>The reason this happens is that Docker runs on Linux as root, if you follow the recommendations of the official installation. So when you create a new container, it’s not created by the current user, but by the root user which is the daemon running underneath. This is important to consider in order to build a secure system, <strong>if no other option is provided, such as passing a different uid in the Dockerfile, the processes in the containers will run as root</strong>.</p>

<p>You can verify this as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="nb">whoami
</span>root
</code></pre></div></div>

<p>As you can see, the result of <code class="language-plaintext highlighter-rouge">whoami</code> (which returns the current user) in the container is root. If you run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="se">\</span>
        bash <span class="nt">-c</span> <span class="s2">"echo </span><span class="se">\$</span><span class="s2">(id -u </span><span class="se">\$</span><span class="s2">{USER}):</span><span class="se">\$</span><span class="s2">(id -g </span><span class="se">\$</span><span class="s2">{USER})"</span>
0:0
</code></pre></div></div>

<p>You’ll see that the id of the user and group inside the container is 0.</p>

<blockquote>
  <p>It is important to remember that in Linux the root user/group has an id, by convention, which is 0.</p>
</blockquote>

<h2 id="solution-1">Solution 1</h2>

<p>You can run the Docker container as your local user, passing the uid and gid. You can try this as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    <span class="nt">-u</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    composer:2.2 composer require psr/log
</code></pre></div></div>

<p>If you list the folder, you can see that the user who owns the folders/files generated by composer is the local user:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 20K
drwxrwxr-x. 3 eva eva 4.0K mar  27 19:04 ./
drwxr-xr-x. 7 eva eva 4.0K mar  27 18:29 ../
drwxr-xr-x. 4 eva eva 4.0K mar  27 19:04 vendor/
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 eva eva   53 mar  27 19:04 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 eva eva 2.1K mar  27 19:04 composer.lock
</code></pre></div></div>

<p>Depending on the project being considered, this solution may have a problem. Inside the container, the user is not longer root. If the application inside the container requires perform tasks as root, you’ll get permissions error inside the container. For example, if you want to run a web application with PHP-FPM:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    <span class="nt">-u</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    composer:2.2 <span class="nb">touch</span> /var/lib/php/sessions/foo
<span class="nb">touch</span>: cannot <span class="nb">touch</span> <span class="s1">'/var/lib/php/sessions/foo'</span>: Permission denied
</code></pre></div></div>

<p>This is because the folder <code class="language-plaintext highlighter-rouge">/var/lib/php/sessions</code> is owned by <code class="language-plaintext highlighter-rouge">www-data:www-data</code>, which most likely does not share your local user’s IDs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="se">\</span>
        bash <span class="nt">-c</span> <span class="s2">"echo </span><span class="se">\$</span><span class="s2">(id -u www-data):</span><span class="se">\$</span><span class="s2">(id -g www-data)"</span>
33:33
</code></pre></div></div>

<h2 id="solution-2">Solution 2</h2>

<p>You can replace the internal user/group IDs with known, good values. In this way, you can change the uid/guid of www-data in the container, passing it the uid/guid of the local user.</p>

<p>To do this, you must first create the Dockerfile file to perform this task:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM composer:2.2

ARG USER_ID
ARG GROUP_ID

RUN if [ ${USER_ID:-0} -ne 0 ] &amp;&amp; [ ${GROUP_ID:-0} -ne 0 ]; then \
    userdel -f www-data &amp;&amp;\
    if getent group www-data ; then groupdel www-data; fi &amp;&amp;\
    groupadd -g ${GROUP_ID} www-data &amp;&amp;\
    useradd -l -u ${USER_ID} -g www-data www-data &amp;&amp;\
    install -d -m 0755 -o www-data -g www-data /home/www-data &amp;&amp;\
    chown --changes --silent --no-dereference --recursive \
          --from=33:33 ${USER_ID}:${GROUP_ID} \
        /home/www-data \
        /.composer \
        /var/run/php-fpm \
        /var/lib/php/sessions \
;fi
        
USER www-data
</code></pre></div></div>

<p>Basically what you do in this Dockerfile is pass the id of our current user/group on the host as an environment variable in the container. In the <code class="language-plaintext highlighter-rouge">if [ ${USER_ID:-0} -ne 0 ] &amp;&amp; [ ${GROUP_ID:-0} -ne 0 ]; then</code> line, you allow the USER_ID and GROUP_ID variables to be optional. If both are not defined, the process that follows is skipped. This makes the Dockerfile usable for both development and production purposes.</p>

<p>In case the variables are defined, the user and group www-data are eliminated:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    userdel -f www-data &amp;&amp;\
    if getent group www-data ; then groupdel www-data; fi &amp;&amp;\
</code></pre></div></div>

<p>Then, the user/group are recreated with the default values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    useradd -l -u ${USER_ID} -g www-data www-data &amp;&amp;\
</code></pre></div></div>

<p>Also, a folder for the user www-data is generated. This is useful if you need your container to perform SSH actions using your host’s SSH keys.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    install -d -m 0755 -o www-data -g www-data /home/www-data &amp;&amp;\
</code></pre></div></div>

<p>In the next line, change the owner to folders that may require updating. In this way, permission error are avoided. To know which are the folders that need to be updated, you can look at the Dockerfile of the image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    chown --changes --silent --no-dereference --recursive \
          --from=33:33 ${USER_ID}:${GROUP_ID} \
        /home/www-data \
        /.composer \
        /var/run/php-fpm \
        /var/lib/php/sessions \
</code></pre></div></div>

<p>Now, build the image:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker image build <span class="se">\</span>
    <span class="nt">--build-arg</span> <span class="nv">USER_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--build-arg</span> <span class="nv">GROUP_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">-t</span> php_test <span class="se">\</span>
    <span class="nb">.</span>
</code></pre></div></div>

<p>Run composer:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    php_test:latest composer require psr/log
</code></pre></div></div>

<p>And if you list the folder, you can see as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lan</span>
total 24K
drwxrwxr-x. 3 1000 1000 4.0K mar  27 19:24 ./
drwxr-xr-x. 7 1000 1000 4.0K mar  27 18:29 ../
drwxr-xr-x. 4 1000 1000 4.0K mar  27 19:24 vendor/
<span class="nt">-rw-rw-r--</span><span class="nb">.</span> 1 1000 1000  545 mar  27 19:19 Dockerfile
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 1000 1000   53 mar  27 19:24 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 1000 1000 2.1K mar  27 19:24 composer.lock
</code></pre></div></div>

<p>The vendor folder generated by composer is owned by the local user’s uid/gid. Inside the container, www-data has this uid/gid. Now you can delete/update without permissions error.</p>

<h3 id="use-docker-compose">Use Docker Compose</h3>

<p>The equivalent docker-compose.yml for this example would be:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
      <span class="na">args</span><span class="pi">:</span>
        <span class="na">USER_ID</span><span class="pi">:</span> <span class="s">${USER_ID:-0}</span>
        <span class="na">GROUP_ID</span><span class="pi">:</span> <span class="s">${GROUP_ID:-0}</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${HOME}/.composer:/.composer</span>
      <span class="pi">-</span> <span class="s">${PWD}:/var/www</span>
</code></pre></div></div>

<p>The user/group id must be defined in an .env file as below. Docker compose cannot parse commands, so <code class="language-plaintext highlighter-rouge">$(id -u ${USER})</code> would not work in the yaml file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>USER_ID=1000
GROUP_ID=1000
</code></pre></div></div>

<p>To build the image and run the container, run as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d --build
</code></pre></div></div>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="https://jtreminio.com/blog/running-docker-containers-as-current-host-user/#ok-so-what-actually-works/">Running Docker Containers as Current Host User</a></li>
  <li><a href="https://www.youtube.com/watch?v=0xUwaz0MD_E">Esto no me lo imaginaba - UID y GIDs en Docker</a></li>
  <li><a href="https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf">Understanding how uid and gid work in Docker containers</a></li>
</ul>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="docker" /><category term="docker" /><summary type="html"><![CDATA[When you are using Docker in development environment and you use some tool that generates files during development, such as dependecies managment (e.g. npm, composer) or to compile task (e.g. SCSS to CSS), if you try to delete or modify these files generated by the tool, maybe you will find with permission denied.]]></summary></entry><entry><title type="html">HTTPS with Docker and Apache</title><link href="http://localhost:4000/docker/2022/01/08/https-con-docker-y-apache.html" rel="alternate" type="text/html" title="HTTPS with Docker and Apache" /><published>2022-01-08T00:00:00-03:00</published><updated>2022-01-08T00:00:00-03:00</updated><id>http://localhost:4000/docker/2022/01/08/https-con-docker-y-apache</id><content type="html" xml:base="http://localhost:4000/docker/2022/01/08/https-con-docker-y-apache.html"><![CDATA[<p>Let’s see, step by step, how configurate HTTPS with Docker Compose in a Apache server using a demo from the Yii framework.</p>

<p><a href="https://github.com/EvaVillarrealGuzman/demo">Here</a> you will find the final code.</p>

<h2 id="1--configure-the-development-environment">1- Configure the development environment</h2>

<p>In this first step, the goal is to configure the development environment machine to be able to do the tests with a fictitious domain at the end.</p>

<p>Suppose that the test will be done with the domain <strong>test.com.ar</strong>. So, edit the <strong>hosts</strong> file. The location of this file depends on the operating system:</p>

<ul>
  <li>In <strong>Linux</strong> you will find it in <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</li>
  <li>In <strong>Windows</strong> you will find it in <code class="language-plaintext highlighter-rouge">C:\Windows\System32\drivers\etc\hosts</code>.</li>
</ul>

<p>This file is used by the operating system to map a IP address to a host name or domain name.</p>

<p>Add the following line and save:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1       test.com.ar
</code></pre></div></div>

<h2 id="2--clone-the-project-from-github">2- Clone the project from Github</h2>

<p>We will use a <a href="https://github.com/yiisoft/demo">demo provided by the Yii framework</a> to explain how to configure HTTPS with Docker and Apache. Fork the repository to your account. At the time of writing this article, I forked it from commit <code class="language-plaintext highlighter-rouge">f19cc5898911d365310df664415c83e4ef8a8c85</code>.</p>

<h2 id="3--get-the-certificates">3- Get the certificates</h2>

<p>In order that our website work with the HTTPS protocol, it is necessary to have an SSL certificate installed, which will be in charge of encrypting the connections between our browser and the server where the website is hosted, so all the information exchanged between them is not accessible.</p>

<p>We won’t delve into how generate this certificate, but you can get it free through <a href="https://letsencrypt.org/">Let’s Encrypt</a> or <a href="https://startssl.com/">StartSSL</a>.</p>

<p>Let’s assume that you already have the certificate and it is called <code class="language-plaintext highlighter-rouge">fullchain.pem</code> and the private key is <code class="language-plaintext highlighter-rouge">privkey.pem</code>. Add these files in a folder in the root path called <code class="language-plaintext highlighter-rouge">ssl</code>. Also, add this folder in the <code class="language-plaintext highlighter-rouge">.gitignore</code>, since this has sensitive information:</p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/ssl-folder.png" alt="" /></p>

<h2 id="4--edit-apache-configuration-files">4- Edit Apache configuration files</h2>

<p>Create a folder <code class="language-plaintext highlighter-rouge">sites-available</code> in the root of the project an add the files <code class="language-plaintext highlighter-rouge">000-default.conf</code> and <code class="language-plaintext highlighter-rouge">default-ssl.conf</code>, with the following content to enable HTTPS in Apache:</p>

<p><strong>000-default.conf</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Directory /app/public/&gt;
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
&lt;/Directory&gt;

&lt;VirtualHost *:80&gt;
        ServerAdmin webmaster@localhost
        DocumentRoot /app/public

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p><strong>default-ssl.conf</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_ssl.c&gt;
	&lt;VirtualHost _default_:443&gt;
		ServerAdmin webmaster@localhost

		DocumentRoot /app/public

		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

		SSLEngine on

        SSLCertificateFile /var/imported/ssl/fullchain.pem
		SSLCertificateKeyFile /var/imported/ssl/privkey.pem

		&lt;FilesMatch "\.(cgi|shtml|phtml|php)$"&gt;
				SSLOptions +StdEnvVars
		&lt;/FilesMatch&gt;
		&lt;Directory /usr/lib/cgi-bin&gt;
				SSLOptions +StdEnvVars
		&lt;/Directory&gt;
	&lt;/VirtualHost&gt;
&lt;/IfModule&gt;
</code></pre></div></div>

<h2 id="5--configure-docker-compose"><a href="#header-2"></a>5- Configure Docker Compose</h2>

<p>Create the <code class="language-plaintext highlighter-rouge">Dockerfile</code> file, which will define our Docker image base, as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM yiisoftware/yii-php:8.0-apache

RUN a2enmod rewrite
RUN a2enmod ssl

RUN a2ensite default-ssl

EXPOSE 80
EXPOSE 443
</code></pre></div></div>

<p>As you can see above, we start from the original image of the project and then we enable the SSL to Apache.</p>

<p>You also have to edit the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> as following:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
    <span class="na">php</span><span class="pi">:</span>
        <span class="na">build</span><span class="pi">:</span>
          <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
          <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
        <span class="na">working_dir</span><span class="pi">:</span> <span class="s">/app</span>
        <span class="na">volumes</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">./:/app</span>
            <span class="c1"># host-volume for composer cache</span>
            <span class="pi">-</span> <span class="s">~/.composer-docker/cache:/root/.composer/cache:delegated</span>
            <span class="pi">-</span> <span class="s">./ssl:/var/imported/ssl</span>
            <span class="pi">-</span> <span class="s">./sites-available:/etc/apache2/sites-available</span>
        <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s1">'</span><span class="s">80:80'</span>
            <span class="pi">-</span> <span class="s1">'</span><span class="s">443:443'</span>
</code></pre></div></div>

<p>In this way, the files that were created before and that allow the operation of HTTPS on the server are passed to the container.</p>

<h2 id="6--run-the-website"><a href="#header-2"></a>6- Run the website</h2>

<p>Finally, you need to fire up the containers running the command below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d
</code></pre></div></div>

<p>In case it is the first time you run, install the project libraries with composer:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose exec php composer install
</code></pre></div></div>

<p>Now you can test with the browser, accessing the site both HTTP and HTTPS:</p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/http.png" alt="" /></p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/https.png" alt="" /></p>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="docker" /><category term="docker" /><category term="apache" /><summary type="html"><![CDATA[Let’s see, step by step, how configurate HTTPS with Docker Compose in a Apache server using a demo from the Yii framework.]]></summary></entry><entry><title type="html">Sorry, too many clients already - error PostgreSQL</title><link href="http://localhost:4000/postgres/2021/12/18/postgresql-too-many-clients.html" rel="alternate" type="text/html" title="Sorry, too many clients already - error PostgreSQL" /><published>2021-12-18T00:00:00-03:00</published><updated>2021-12-18T00:00:00-03:00</updated><id>http://localhost:4000/postgres/2021/12/18/postgresql-too-many-clients</id><content type="html" xml:base="http://localhost:4000/postgres/2021/12/18/postgresql-too-many-clients.html"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">max_connections</code> parameter determines the maximun number of simultaneous connections that the database server can handle. By default, PostgreSQL sets this parameter to 100.</p>

<p>When this limit is exceeded, PostgreSQL will throw the next exception:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.postgresql.util.PSQLException: FATAL: sorry, too many clients already.
</code></pre></div></div>
<h2 id="solutions">Solutions</h2>

<p>Faced with this error, we can find the following solutions:</p>

<ol>
  <li>Increase the <code class="language-plaintext highlighter-rouge">max_connections</code> parameter. This is the most easiest one, but probably will work as a temporary solution.</li>
  <li>Ensure that applications close the connection to the database. To help you find the applications that isn’t closing the connection, you could give different usernames/passwords to each application that might not releasing the connections, and then, with <code class="language-plaintext highlighter-rouge">pg_stat_activity</code> you can find out the application that is not closing.</li>
  <li>Use a connection pool in applications. A connection pool keeps a number of open connections to the database. In this way, the application, instead of opening a new connection, can use one of those available in the pool, improvement the performance of the application because open and close connections in database incur a processor cost. For more detail see <a href="/Connections-pool">here</a>.</li>
</ol>

<p>Particularly in this post we are going to focus on the solution 1, that is, the configuration of <code class="language-plaintext highlighter-rouge">max_connections</code> parameter.</p>

<p>About this parameter, you have in mind the following:</p>

<blockquote>
  <p>Each PostgreSQL connection consumes RAM for managing the connection or the client using it. The more connections you have, the more RAM you will be using that could instead be used to run the database.</p>
</blockquote>

<p>Typically, a well-written application doesn’t need a large number of connections. If you have an application that needs a large number of connections, then consider using a tool which can pool connections. As each connection consumes RAM, you should be looking to minimize their use.</p>

<h2 id="useful-command-to-see-the-connections-in-the-database">Useful command to see the connections in the database</h2>

<h3 id="check-the-current-value-of-the-parameter">Check the current value of the parameter</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHOW</span> <span class="n">max_connections</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="see-in-detail-the-currently-used-connections">See in detail the currently used connections</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
</code></pre></div></div>

<p>This command allow you see who/what/where/when is holding open your connections.</p>

<h3 id="get-the-number-of-connections-currently-used">Get the number of connections currently used</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">pg_stat_activity</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="edit-max_connections-parameter">Edit max_connections parameter</h2>

<p>Just increasing <code class="language-plaintext highlighter-rouge">max_connections</code> is bad idea. You need to increase <code class="language-plaintext highlighter-rouge">shared_buffers</code> and <code class="language-plaintext highlighter-rouge">kernel.shmmax</code> as well. <code class="language-plaintext highlighter-rouge">max_connections</code> and <code class="language-plaintext highlighter-rouge">shared_buffers</code> are PostgreSQL parameters and <code class="language-plaintext highlighter-rouge">kernel.shmmax</code> is a kernel parameter.</p>

<p>The <code class="language-plaintext highlighter-rouge">shared_buffers</code> parameter determines how much memory is dedicated to PostgreSQL to use for caching data.</p>

<p>You can following the next rules to configure <code class="language-plaintext highlighter-rouge">max_connections</code>, <code class="language-plaintext highlighter-rouge">shared_buffers</code> and <code class="language-plaintext highlighter-rouge">kernel.shmmax</code> parameters:</p>

<ul>
  <li>If you have a server with 1 GB or more of RAM, a reasonable initial value for  <code class="language-plaintext highlighter-rouge">shared_buffers</code> is 25% of the memory of your server.</li>
  <li>It’s unlikely you’ll find using more than 40% of RAM to work better than a smaller amount (like 25%).</li>
  <li>Be aware that if your server or PostgreSQL build is 32-bit, it might not be practical to set <code class="language-plaintext highlighter-rouge">shared_buffers</code> above 2 ~ 2.5GB.</li>
</ul>

<p>To edit these parameters, first find the location of the PostgreSQL config file:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHOW</span> <span class="n">config_file</span><span class="p">;</span>
</code></pre></div></div>

<p>Open the PostgreSQL config file  and update the <code class="language-plaintext highlighter-rouge">max_connections</code> and <code class="language-plaintext highlighter-rouge">shared_buffers</code> parameters. For example, if you have a server with 8 GB of memory edit the value of <code class="language-plaintext highlighter-rouge">shared_buffers</code> parameter to 2 GB (25%) in <code class="language-plaintext highlighter-rouge">postgresql.conf</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>max_connections = 100
shared_buffers = 2GB
</code></pre></div></div>

<p>Restart the PostgreSQL service:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart postgresql
</code></pre></div></div>

<p>You should increase kernel max segment size to be slightly larger than the <code class="language-plaintext highlighter-rouge">shared_buffers</code>. In the file <code class="language-plaintext highlighter-rouge">/etc/sysctl.conf</code>, set the <code class="language-plaintext highlighter-rouge">kernel.shmmax</code> parameter as following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kernel.shmmax=2469606195
</code></pre></div></div>

<p>It will take effect when PostgreSQL reboots. This line makes the kernel have a maximun of  2.3 GB.</p>

<p>On modern systems, <code class="language-plaintext highlighter-rouge">kernel.shmmax</code> it’s already set high and should not be changed. To check the value that is setting in your system, you can run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/sys/kernel/shmmax
</code></pre></div></div>

<blockquote>
  <p><strong>Note:</strong> You can use the page <a href="https://pgtune.leopard.in.ua/">PGTune</a> to get the optimal parameters for your system.</p>
</blockquote>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/2757549/org-postgresql-util-psqlexception-fatal-sorry-too-many-clients-already">org.postgresql.util.PSQLException: FATAL: sorry, too many clients already</a></li>
  <li><a href="https://dadruid5.com/2017/07/20/checking-and-increasing-the-max-connections-in-postgresql/">Checking and Increasing the Connection Limit in PostgreSQL</a></li>
  <li><a href="https://devcoops.com/resolve-sorry-too-many-clients-postgres-issue/">How to resolve PostgreSQL FATAL: sorry, too many clients already</a></li>
  <li><a href="https://stackoverflow.com/questions/30778015/how-to-increase-the-max-connections-in-postgres">How to increase the max connections in postgres?</a></li>
</ul>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="postgres" /><category term="db" /><category term="postgres" /><summary type="html"><![CDATA[The max_connections parameter determines the maximun number of simultaneous connections that the database server can handle. By default, PostgreSQL sets this parameter to 100.]]></summary></entry><entry><title type="html">Connection Pooling</title><link href="http://localhost:4000/postgres/2021/12/13/connections-pool.html" rel="alternate" type="text/html" title="Connection Pooling" /><published>2021-12-13T00:00:00-03:00</published><updated>2021-12-13T00:00:00-03:00</updated><id>http://localhost:4000/postgres/2021/12/13/connections-pool</id><content type="html" xml:base="http://localhost:4000/postgres/2021/12/13/connections-pool.html"><![CDATA[<p>Database connections are fairly expensive operations. Such operation involved the following sequence of steps:</p>

<p>1- Opening a connection to the database using the database driver<br />
2- Opening a TCP socket<br />
3- Execute the SQL query over the socket<br />
4- Closing the connection<br />
5- Closing the socket</p>

<p>In a production environment where we expect thousands of concurrent open and closed connections from clients, the steps explained above for each connection can cause performance to deteriorate, impacting a poor user experience, lost revenue, and even unscheduled downtime. Therefore, the database connections should be kept to a minimum in all possible use cases.</p>

<h2 id="whats-connection-pooling">¿What’s Connection Pooling?</h2>

<p>Connection Pooling is a data access pattern, whose main purpose is to reduce the overhead involved in performing database connections and read/write database operations. It’s a database connection cache implementation which can be configured to suit specific requirements.</p>

<p>The connections pools reuse some existing connection. It prevents the overhead of creating a new connection to the database every time there is a request for a database connection with the same properties (i.e name, database, protocol version). Instead of opening and closing connections for every request, connection pool uses a cache that can be reused when future requests to the database are required. Because traffic is never constant, the connection pool can manage traffic peaks without causing outages.</p>

<h2 id="how-does-connection-pooling-work">¿How does Connection Pooling work?</h2>

<p>A pool contains two types of connections:</p>

<ul>
  <li><strong>Active connection</strong>: In use by the application.</li>
  <li><strong>Idle connection</strong>:  Available for use by the application.</li>
</ul>

<p>Every time the app gets a connection, the pool creates a new connection only if needed, that is, every connection in the pool is being used (active). Instead, if the pool have connections that are not currently in use (idle), the app will use one of those. The pool keeps a number of connections ready to be used defined by minIdle and maxIdle parameters. When the application close the connection, the pool does not close the physical connection, but becomes idle to be reused. This favors the scalability and performance of an application.</p>

<h2 id="ways-to-integrate-a-connection-pooling">Ways to integrate a Connection Pooling</h2>

<ul>
  <li><strong>As external service or middleware</strong>: The connection poolers such as pgbouncer and pgpool-II can be used to pool connections from clients to a  PostgreSQL database. The connection pooler is between the application and the database server.</li>
  <li><strong>Client side libraries</strong>: There are libraries that extend the functionality of the database driver to include support for connection pooling.</li>
</ul>

<p>The best way to implement connection pooling for applications is to make use of an external service or middleware, as it is easier to configure and manage. Also, external middleware like pgpool-II provides other features, like load balancing.</p>

<h2 id="parameter-settings">Parameter settings</h2>

<p>Different applications may have different requirements to database connections and you may want to modify the default behavior of connection pooling. Settings such as pool size and connection timeouts can improve the overall performance of the connection pool, as well as connection availability.</p>

<p>In many cases, the best way to tune a connection pool for a specific applications is to try different combinations of the property values until a optimal performance is achieved.</p>

<h3 id="control-pool-size">Control pool size</h3>

<p>The connection pool allows the number of connections to be dynamic as demand increases and decreases. This helps conserve system resources that are otherwise wasted maintaining unnecessary connections.</p>

<h4 id="set-initial-pool-size">Set initial pool size</h4>

<p>Initial pool size specifies the number of available connections that are created when connection pool is initially created o reset.</p>

<p>By default, PostgreSQL has the value zero, which means that there are no previously created connections.</p>

<p>If the initial pool size is greather than the maximum pool size, only the maximum pool size of connections are initialized. In the case that the initial pool size is less than the minimum pool size, only the initial pool size of connections are initialized and held until enough connections are created to meet the minimum pool size value.</p>

<h4 id="set-minimum-pool-size">Set minimum pool size</h4>

<p>Minimum pool size specifies the minimum number of available and borrowed connections that a pool maintains. A connection pool always tries to return to the specified minimum size unless the minimum amount has not yet been reached. For example, if the minimum limit is set to ten and only two connections have been created and borrowed, then the number of connections held by the pool remains two.</p>

<p>By default, PostgreSQL has the value zero.</p>

<h4 id="set-maximum-pool-size">Set maximum pool size</h4>

<p>Maximum pool size specifies the maximum number of connections that a pool maintains. If the maximum number of connections are borrowed, connections will not be available until a connection is returned to the pool.</p>

<p>This property ensures that the pool does not grow to the point of exhausting a system’s resources, which ultimately affects an application’s performance and availability.</p>

<p>A value of zero indicates that there are no connections managed by the pool. An attempt to get a connection result in this situation is an exception.</p>

<h3 id="connection-control">Connection control</h3>

<p>Connections that become stale can affect connection availability. It is necessary to make an effort to close them, because otherwise unused connections for long periods of time can be wasted.</p>

<p>It is good practice to close all connections that are no longer needed by an application. Closing connections help minimize the number of connections that become stale but continue to be borrowed.</p>

<h4 id="maximum-connection-reuse-count">Maximum connection reuse count</h4>

<p>This property specifies the maximum number of times any connection can be reused after which the pool removes and closes a connection. The value must be greater than 0 for this feature to be enabled. For example, if the specified value is 100, then when a connection is reused or borrowed 100 times from the pool, it is closed and removed from the pool. Connections are closed gracefully after they are returned to the pool and the property value has been exceeded.</p>

<p>Default is 0, which means this feature is not enabled.</p>

<h4 id="maximum-connection-reuse-time">Maximum connection reuse time</h4>

<p>This property specifies the maximum time any connection can potentially be reused after which the pool removes and closes a connection. The value is specified in seconds and must be greater than 0. For example, if the specified value is 3600 seconds, then when a connection is in existence for more than 3600 seconds, the connection is closed and removed from the pool. Connections are closed gracefully after they are returned to the pool and the specified property value has been exceeded.</p>

<p>Default is 0, which means this feature is not enabled.</p>

<h4 id="abandoned-connection-timeout">Abandoned connection timeout</h4>

<p>This timeout determines how long a borrowed connection can remain unused before it is considered as abandoned and reclaimed by the connection pool.</p>

<p>Setting the value to 0 disables abandoned connect.</p>

<h4 id="connection-wait-timeout">Connection wait timeout</h4>

<p>This property specifies the amount of time to wait for a used connection to be released by a client. This only applies when the maximum number of connections has been borrowed from the connection pool. When a client tries to borrow a connection from the pool and all connections are in use, the connection pool waits for a connection to be released back to the pool.</p>

<h4 id="innactive-connection-timeout">Innactive connection timeout</h4>

<p>This timeout determines how long an available connection remains in the connection pool before it is removed from the pool.</p>

<p>Setting the value to 0 disables inactive connection timeout processing.</p>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="http://www.juntadeandalucia.es/servicios/madeja/contenido/recurso/218">Manejo del pool de conexiones</a></li>
  <li><a href="https://es.stackoverflow.com/questions/46754/pool-de-conexiones-java">Pool de Conexiones Java</a></li>
  <li><a href="https://es.stackoverflow.com/questions/359715/cu%C3%A1l-ser%C3%ADa-la-diferencia-entre-usar-un-pool-o-usar-una-conexion-tradicional-a-l">¿cuál sería la diferencia entre usar un pool o usar una conexion tradicional a la base de datos?</a></li>
  <li><a href="https://www.baeldung.com/java-connection-pooling">A Simple Guide to Connection Pooling in Java</a></li>
  <li><a href="https://stackoverflow.blog/2020/10/14/improve-database-performance-with-connection-pooling/">Improve database performance with connection pooling</a></li>
  <li><a href="https://stackoverflow.com/questions/18496540/node-js-mysql-connection-pooling/54224377#54224377">node.js + mysql connection pooling</a></li>
  <li><a href="https://docs.oracle.com/cd/E11882_01/java.112/e12826/oracle/ucp/jdbc/PoolDataSource.html">Oracle Universal Connection Pool for JDBC Java API Reference
11g Release 2 (11.2)</a></li>
</ul>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="postgres" /><category term="db" /><category term="postgres" /><summary type="html"><![CDATA[Database connections are fairly expensive operations. Such operation involved the following sequence of steps:]]></summary></entry><entry><title type="html">How to set Docker Resources Limit</title><link href="http://localhost:4000/docker/2021/12/02/docker-limit-resources.html" rel="alternate" type="text/html" title="How to set Docker Resources Limit" /><published>2021-12-02T00:00:00-03:00</published><updated>2021-12-02T00:00:00-03:00</updated><id>http://localhost:4000/docker/2021/12/02/docker-limit-resources</id><content type="html" xml:base="http://localhost:4000/docker/2021/12/02/docker-limit-resources.html"><![CDATA[<p>By default, Docker don’t limit the amount of memory and CPU that a container can use. The container can use as much of a given resources as the host’s kernel scheduler allows.</p>

<p>It’s important to limit the resources that can consume a container. When the kernel detect that the computer have little memory, it’s throws an <code class="language-plaintext highlighter-rouge">Out of Memory Exception</code> and starts killing process to free up memory, and this can bring the entire system down. To avoid that circunstancies, you must execute test in your application and calculate the amount of resources needed, and then limit the container to use a rational amount of resources.</p>

<p>You can view the statistics of your Docker containers with the  <code class="language-plaintext highlighter-rouge">stats</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker stats <span class="o">[</span>docker_image]
</code></pre></div></div>

<h2 id="configure-system-to-enabled-limiting-resources">Configure system to enabled limiting resources</h2>

<p>Before limiting the resources of a container it’s important to check that the kernel of the host allow this. Run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker info
</code></pre></div></div>

<p>If you receive the following warning in the output:</p>

<pre><code class="language-output">WARNING: Noswaplimitsupport
</code></pre>

<p>So, you must enable the functionality in the kernel. To achieve this, edit the file that is located in <code class="language-plaintext highlighter-rouge">/etc/default/grub</code>, and then add the following line:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
</code></pre></div></div>

<p>Save the changes and update the GRUB configuration with the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>update-grub
</code></pre></div></div>

<p>Then, reboot your machine for the changes to take place:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>shutdown <span class="nt">-r</span>
</code></pre></div></div>

<p>Once the machine has restarted, make sure that the changes have been made:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker info
</code></pre></div></div>

<p>You shouldn’t received the warning <code class="language-plaintext highlighter-rouge">WARNING: Noswaplimitsupport</code> this time.</p>

<h2 id="limit-container-memory-access">Limit Container Memory Access</h2>

<p>There are different ways to limit RAM to containers:</p>

<h3 id="configuring-the-maximum-amount-of-memory-a-container-can-use">Configuring the maximum amount of memory a container can use</h3>

<p>Add the  <code class="language-plaintext highlighter-rouge">--memory</code> option to the command <code class="language-plaintext highlighter-rouge">docker run</code> for limit the maximum amount of memory of a container. Within the command, specify how much memory you want dedicate to that specific container.</p>

<p>The syntax is the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--memory</span><span class="o">=</span><span class="s2">"[memory_limit]"</span> <span class="o">[</span>docker_image]
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">memory_limit</code> should be a positive integer following by the suffix b, k, m o g (short for bytes, kilobytes, megabytes o gigabytes).</p>

<p>For example, to run an instance of a Ubuntu container and configurate a limit to 1GB, the command should be as follow:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--memory</span><span class="o">=</span><span class="s2">"1g"</span> ubuntu
</code></pre></div></div>

<h3 id="defining-the-amount-of-memory-that-a-container-can-swap-to-disk">Defining the amount of memory that a container can swap to disk</h3>

<p>Add the option <code class="language-plaintext highlighter-rouge">swamp</code> to store data even after all RAM assigned to the container has been used up. It does this by ignoring the memory limitation and writing directly to the disk. Although this is a useful feature, it is not a recommended practice as it slows down performance.</p>

<p>The option <code class="language-plaintext highlighter-rouge">swamp</code> includes the total amount of non-swap memory plus the amount of swap memory reserved as backup.</p>

<p>The syntax is the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--memory</span><span class="o">=</span><span class="s2">"[memory_limit]"</span> <span class="nt">--memory-swap</span><span class="o">=</span><span class="s2">"[memory_limit]"</span> <span class="o">[</span>docker_image]
</code></pre></div></div>

<p>For example, to configure <code class="language-plaintext highlighter-rouge">--memory</code> to 1 GB, the amount of swap memory has to be greather than that. To run a container with an additional 1GB of swap memory, you should configurate the option <code class="language-plaintext highlighter-rouge">swamp</code> to 2 GB.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--memory</span><span class="o">=</span><span class="s2">"1g"</span> <span class="nt">--memory-swap</span><span class="o">=</span><span class="s2">"2g"</span> ubuntu
</code></pre></div></div>

<p>If you don’t want to use swap memory, give <code class="language-plaintext highlighter-rouge">--memory</code> and <code class="language-plaintext highlighter-rouge">--memory-swap</code> the same values.</p>

<h3 id="set-soft-limit-to-container-memory">Set soft limit to container memory</h3>

<p>When you limit the memory access to a container with the option <code class="language-plaintext highlighter-rouge">--memory</code> you are setting a hard limit that the container can’t to surpassed. However, you can set a soft limit with the option <code class="language-plaintext highlighter-rouge">--memory-reserve</code> which warns when the container reaches the end of its assigned memory but doesn’t stop any of its services.</p>

<p>If <code class="language-plaintext highlighter-rouge">--memory</code> limitations see are not set, setting the soft limit with <code class="language-plaintext highlighter-rouge">--memory-reservation</code> doesn’t completely limit container space. If you have both features enabled, the soft limit is always lower than the maximum space capacity.</p>

<p>For example, if you want that a Ubuntu container had a memory reservation of 750 MB and the maximun RAM capacity of 1 BG, the command is as following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--memory</span><span class="o">=</span><span class="s2">"1g"</span> <span class="nt">--memory-reservation</span><span class="o">=</span><span class="s2">"750m"</span> ubuntu
</code></pre></div></div>

<h2 id="limit-container-cpu-access">Limit Container CPU Access</h2>

<p>As memory limit, there are different ways to configure CPU limit:</p>

<h3 id="defining-a-cpu-limit">Defining a CPU limit</h3>

<p>The option <code class="language-plaintext highlighter-rouge">--cpus</code> allows you specify how much of the available CPU resources a container can use.</p>

<p>For example, if the host machine has two CPUs and you set <code class="language-plaintext highlighter-rouge">--cpus="1.5"</code>, the container is guaranteed at most one and a half of the CPUs.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--cpus</span><span class="o">=</span><span class="s2">"1.5"</span> ubuntu
</code></pre></div></div>

<h3 id="assigning-dedicated-cpu-to-containers">Assigning dedicated CPU to containers</h3>

<p>You can use the option <code class="language-plaintext highlighter-rouge">--cpuset-cpus</code> to limit the specific CPUs or cores a container can use. There are two different formats:</p>

<ul>
  <li>a comma-separated list. For example: <code class="language-plaintext highlighter-rouge">0,2,4</code></li>
  <li>a hyphen-separated range. For example: <code class="language-plaintext highlighter-rouge">1-3</code></li>
</ul>

<p>CPUs are addressed using a zero based index. This means 0,2,4 tells Docker to allocate compute-power from the first, third, and fifth CPU.</p>

<p>For example, to run a container y allocate just the second CPU, the command is as following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--rm</span> <span class="nt">--cpuset-cpus</span> 1 ubuntu <span class="nt">-c</span> 8 <span class="nt">-t</span> 20s
</code></pre></div></div>

<p>Because the set of CPUs is selected explicitly, the container is limited to the capacity of the set.</p>

<h3 id="cpu-shares-for-docker-containers">CPU Shares for Docker containers</h3>

<p>The option <code class="language-plaintext highlighter-rouge">--cpu-shares</code> allows you to give access to a greater or lesser proportion of the host machine’s CPU cycles. By default, it’s configure to 1024. To give a container relatively less CPU time set <code class="language-plaintext highlighter-rouge">--cpu-shares</code> to lower than 1024. To give a container relatively more CPU set <code class="language-plaintext highlighter-rouge">--cpu-shares</code> for Docker run to a value greater than 1024.</p>

<p>This is only enforced when CPU cycles are constrained. When plenty of CPU cycles are available, all containers use as much CPU as they need. In that way, this is a soft limit. It prioritizes container CPU resources for the available CPU cycles. It does not guarantee or reserve any specific CPU access.</p>

<p>For example, to run a container with less resources shared, the command is as following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-it</span> <span class="nt">--cpus-shares</span><span class="o">=</span><span class="s2">"700"</span> ubuntu
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">--cpus</code> or <code class="language-plaintext highlighter-rouge">--cpu-quota</code> is set then even if there is no contention for CPU time the container will be limited based. This can be good for predictable resource usage but is generally bad for utilisation.</p>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="https://phoenixnap.com/kb/docker-memory-and-cpu-limit">How to Set Docker Memory and CPU Usage Limit</a></li>
  <li><a href="https://docs.docker.com/config/containers/resource_constraints/#configure-the-default-cfs-scheduler/">Runtime options with Memory, CPUs, and GPUs</a></li>
  <li><a href="https://www.batey.info/cgroup-cpu-shares-for-docker.html">CPU Shares for Docker containers</a></li>
  <li><a href="https://www.thorsten-hans.com/docker-container-cpu-limits-explained">Docker Container CPU Limits Explained</a></li>
</ul>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="docker" /><category term="docker" /><summary type="html"><![CDATA[By default, Docker don’t limit the amount of memory and CPU that a container can use. The container can use as much of a given resources as the host’s kernel scheduler allows.]]></summary></entry><entry><title type="html">Optimizing Performance in React</title><link href="http://localhost:4000/react/2021/11/26/react-performance.html" rel="alternate" type="text/html" title="Optimizing Performance in React" /><published>2021-11-26T00:00:00-03:00</published><updated>2021-11-26T00:00:00-03:00</updated><id>http://localhost:4000/react/2021/11/26/react-performance</id><content type="html" xml:base="http://localhost:4000/react/2021/11/26/react-performance.html"><![CDATA[<p>Performance has an impact on the quality of the application and the user experience. There are different decisions that impact the overall performance of an application, from how we code to how the application infrastructure is configured. In this post we will focus on how to write our React applications to optimize them. Internally, React uses several techniques to minimize the number of costly DOM operations required to update the UI. This will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.</p>

<h2 id="reactfragment">React.Fragment</h2>

<p>React requires that you always group a set of elements into a parent element. It is common for React developers that not know <code class="language-plaintext highlighter-rouge">Fragment</code> to wrap with the <code class="language-plaintext highlighter-rouge">div</code> element, as shown in the following example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Content<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>As this element <code class="language-plaintext highlighter-rouge">div</code> has no functionality other than grouping elements, this can cause performance issues as it adds an extra node to DOM. React provides Fragments for this, which doesn’t any extra node. There’re two syntaxes for Fragments, one is using <code class="language-plaintext highlighter-rouge">&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> or with the short syntax <code class="language-plaintext highlighter-rouge">&lt;&gt;&lt;/&gt;</code>. The above example can be written with Fragment in the following ways:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Content<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">Fragment</span><span class="p">&gt;</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;&gt;</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Content<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/&gt;</span>
</code></pre></div></div>

<h2 id="use-packaging-in-production-mode">Use packaging in Production mode</h2>

<p>When you’re developing a React application, helpful warnings and error messages are presented. These help you to identity bugs and problems during the development, but they also come at a performance cost.</p>

<p>If you look at the React source code, you’ll see a lots of code with <code class="language-plaintext highlighter-rouge">if (process.env.NODE_ENV != 'production')</code>. This snippets of code that React is executing in your development environment is not something that the user needs. For production environments this code is unnecessary. You can achieve this in different ways depending on how you built your app:</p>

<ul>
  <li>If you built your project with create-react-app, so you can run <code class="language-plaintext highlighter-rouge">npm run build</code> to build the production code.</li>
  <li>If you used webpack, so you can run <code class="language-plaintext highlighter-rouge">webpack -p</code> which is the same as <code class="language-plaintext highlighter-rouge">webpack --optimize-minimize --define process.env.NODE_ENV="'production'"</code></li>
</ul>

<h2 id="use-memoization">Use memoization</h2>

<p>Memoization is an optimization technique to increase the performance of the application by storing the results and returning the cached result when the inputs are the sames.</p>

<p>React provides React.memo and useMemo for memoization which store the cached components.</p>

<p>When functional components is rendered using React.memo or useMemo then its results are saved in memory and next time that the component getting called with the same props, the result is a cache component without any execution.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">UserDisplay</span> <span class="o">=</span> <span class="p">(</span><span class="nx">userDetails</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">address</span><span class="p">}</span> <span class="o">=</span> <span class="nx">userDetails</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">age</span><span class="si">}</span> , <span class="si">{</span><span class="nx">address</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">UserDisplay</span><span class="p">);</span>
<span class="c1">// 1 - UserDisplay component gets called and executed, and then rendered</span>
<span class="p">&lt;</span><span class="nc">UserDisplay</span>
  <span class="na">name</span><span class="p">=</span><span class="s">"Test"</span>
  <span class="na">age</span><span class="p">=</span><span class="s">"30"</span>
  <span class="na">address</span><span class="p">=</span><span class="s">"Test address"</span>
<span class="p">/&gt;</span>
<span class="c1">// 2 - The cached result will render without any execution</span>
<span class="p">&lt;</span><span class="nc">UserDisplay</span>
  <span class="na">name</span><span class="p">=</span><span class="s">"Test"</span>
  <span class="na">age</span><span class="p">=</span><span class="s">"30"</span>
  <span class="na">address</span><span class="p">=</span><span class="s">"Test address"</span>
<span class="p">/&gt;</span>
<span class="c1">// Third - UserDisplay component gets called and executed, and then rendered</span>
<span class="c1">// because the *name* value is different</span>
<span class="p">&lt;</span><span class="nc">UserDisplay</span>
  <span class="na">name</span><span class="p">=</span><span class="s">"New Test"</span>
  <span class="na">age</span><span class="p">=</span><span class="s">"30"</span>
  <span class="na">address</span><span class="p">=</span><span class="s">"Test address"</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="code-splitting">Code Splitting</h2>

<p>Before explaining <em>code splitting</em> it’s important to undertand the concept of <em>Lazy loading</em>. This means that the resources (images, script, etc.) should be loaded when they are really needed. So instead of loadind the whole page and rendering in the browser, only the critical components are loaded first and then the rest only when they needed. In this way, time and memory are not wasted with processes that do not benefit the user experience.</p>

<p>Now, <em>code splitting</em> es a technique that allow us to achieve the <em>lazy loading</em> concept by splitting the application into different files instead of delivering one file. There are different criteria to split the file. Some of the most common and that can be combined are:</p>

<p><strong>1- Split by routes:</strong></p>

<p>This will leaves with different file for each top level route. In the next example, you will have three files: one for the DynamicPage component, one for the NoMatch component and one for the main application.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">Suspense</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Switch</span><span class="p">,</span> <span class="nx">BrowserRouter</span> <span class="k">as</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">Route</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">importedComponent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-imported-component</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">Home</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Home</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Loading</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Loading</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AsyncDynamicPAge</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">lazy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="cm">/* webpackChunkName:'DynamicPage' */</span> <span class="dl">'</span><span class="s1">./DynamicPage</span><span class="dl">'</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">AsyncNoMatch</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">lazy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="cm">/* webpackChunkName:'NoMatch' */</span> <span class="dl">'</span><span class="s1">./NoMatch</span><span class="dl">'</span><span class="p">));</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Router</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Suspense</span> <span class="na">fallback</span><span class="p">=</span><span class="si">{</span><span class="nx">Loading</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">Switch</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Home</span><span class="si">}</span><span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/dynamic"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">AsyncDynamicPAge</span><span class="si">}</span><span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">AsyncNoMatch</span><span class="si">}</span><span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">Switch</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Suspense</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Router</span><span class="p">&gt;</span>
    <span class="p">)</span>
        <span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p>The way to indicate webpack that we want to split the code into different files is through <em>dynamic imports</em> with the keyword <em>import</em>.</p>

<p><code class="language-plaintext highlighter-rouge">React.lazy()</code> is a function that allow you to implement the <em>dynamic imports</em> for components in React. <code class="language-plaintext highlighter-rouge">React.Suspense</code> has a <em>fallback</em> property that receive a React element that you want to render while the component is loading with <code class="language-plaintext highlighter-rouge">React.lazy()</code>.</p>

<p>Also, you will have to configure the webpack file as follows:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span><span class="w">
</span><span class="err">module.exports</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">output:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">filename:</span><span class="w"> </span><span class="err">'</span><span class="p">[</span><span class="err">name</span><span class="p">]</span><span class="err">.</span><span class="p">[</span><span class="err">hash</span><span class="p">]</span><span class="err">.js'</span><span class="p">,</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>2- Split by vendor:</strong></p>

<p>This approach will help you in two ways: it helps the browser to store those resources that change with less frequency; and it help the browser to take advantage of parallel downloading to potencially reduce load time.</p>

<p>An example of a webpack configuration is as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">vendor</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">semantic-ui-react</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.js</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="p">...</span>
  <span class="na">optimization</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">splitChunks</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">styles</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">styles</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
          <span class="na">chunks</span><span class="p">:</span> <span class="dl">'</span><span class="s1">all</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">enforce</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">},</span>
        <span class="na">vendor</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">chunks</span><span class="p">:</span> <span class="dl">'</span><span class="s1">initial</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">test</span><span class="p">:</span> <span class="dl">'</span><span class="s1">vendor</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">vendor</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">enforce</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">entry.vendor: [‘semantic-ui-react’]</code>  specifies which vendor we want to extract from our main application. The <code class="language-plaintext highlighter-rouge">optimization</code> will help you to reduce file size.</p>

<p><strong>3- Extract css styles:</strong></p>

<p>You can use ExtractTextWebpackPlugin in webpack to extract all css code into a separate css file. This will also help the browser to cache this file and do parallel downloading on page load.</p>

<h2 id="virtualizing-the-long-lists">Virtualizing the long lists</h2>

<p>If your application renders long lists of data, it’s recommend that you use the <em>windowing</em> technique. This only renders a subset at any time and render the remaining data whenever scrolled, and reduce the re-rendering time, as well as the number of nodes created in the DOM.</p>

<p><a href="https://react-window.vercel.app/#/examples/list/fixed-size">react-window</a> and <a href="https://bvaughn.github.io/react-virtualized/#/components/List">react-virtualized</a> are popular libraries of <em>windowing</em> in React.</p>

<h2 id="implement-throttling-and-debouncing-to-avoid-multiple-api-calls">Implement Throttling and Debouncing to avoid multiple API calls</h2>

<p>Debouncing and Throttling are widely-used techniques that help us in limiting the rate at which a function fires off. These two techniques give us a layer of control between the event and the execution of the functions attached to them. API servers often implement either of these two techniques to prevent the application from being overloaded.</p>

<p>Both these techniques are almost identical and help us reduce the number of function calls being made but they have one small, but significant difference among them.</p>

<p>Debouncing is a technique in which no matter how many times a user fires an event, the call will be made only after a specific amount of time has passed after the user stops firing the event.For example, let’s say a user is typing something in a search box. This search box makes API calls and has a debounce function attached to it with a specified time duration of 400ms. So now, unless 400ms have passed after the user stopped typing, the API call wouldn’t be made.</p>

<p>Throttling is a technique that makes the next function call strictly after a certain period of time. No matter how many times the user fires an event, the function attached will be executed only once in the given time period.</p>

<p>Debouncing can be used when the result of the most recent event occurrence is what is important. For example, a search query on an e-commerce website.</p>

<p>Throttling can be used when the input provided to the function call doesn’t matter or is the same each time. For example, infinite scrolling on a webpage. Here, we need to check how far the user is from the bottom of the page. If they’re too close, we request more data and append it to the page. Here debouncing wouldn’t work as it would only trigger the event when the user has stopped scrolling but we need to start fetching the content before the user reaches the bottom.</p>

<h2 id="enable-gzip-on-your-web-server">Enable Gzip on your web server</h2>

<p>All modern browser support and automatically negotiate Gzip compression for the HTTP requests. Enabling Gzip compression will help reduce the size of responses, which will impact resource download time.</p>

<p>Check your web server documentation to enable compression:</p>

<ul>
  <li>Apache: Use <a href="http://httpd.apache.org/docs/current/mod/mod_deflate.html">mod_deflate</a></li>
  <li>Nginx: Use   <a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html">ngx_http_gzip_module</a></li>
</ul>

<h2 id="useful-tools">Useful tools</h2>

<p>We can’t talk about performance if we don’t measure it. We need to perform comparisons before and after making changes to your code to track your progress.</p>

<p>Here some tools that can help you with this:</p>

<h3 id="why-did-you-render">Why Did You Render</h3>

<p><a href="https://www.npmjs.com/package/@welldone-software/why-did-you-render">Why Did You Render</a> is a library that helps detect why a component is re-rendering. It does this by modifying the behavior of the code at runtime using <em>monkey patching</em> React.</p>

<h3 id="react-profiler">React Profiler</h3>

<p><a href="https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html">React Profiler</a> is a DevTools that you can install in your browser and collect timing information about each component that’s rendered.</p>

<h3 id="webpack-bundle-analyzer">Webpack Bundle Analyzer</h3>

<p><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">Webpack Bundle Analyzer</a> provide you a visual representation about the sizes of your files.</p>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="https://hackernoon.com/lessons-learned-code-splitting-with-webpack-and-react-f012a989113">Lessons Learned: Code Splitting with Webpack and React</a></li>
  <li><a href="https://www.freecodecamp.org/news/learn-webpack-for-react-a36d4cac5060/">How to use Webpack with React: an in-depth tutorial</a></li>
  <li><a href="https://es.reactjs.org/docs/optimizing-performance.html">Optimizando el Rendimiento</a></li>
  <li><a href="https://www.c-sharpcorner.com/article/performance-optimization-techniques-for-react-applications/">Performance Optimization Techniques For React Applications</a></li>
  <li><a href="https://blog.bitsrc.io/improve-your-react-app-performance-by-using-throttling-and-debouncing-101afbe9055">Improve Your React App Performance by Using Throttling and Debouncing</a></li>
  <li><a href="https://medium.com/swlh/9-performance-optimization-strategies-for-reactjs-development-36f6d03a0912">9 Performance Optimization Strategies for ReactJS Development</a></li>
  <li><a href="https://www.toptal.com/react/componentes-react-eficientes-una-guia-para-optimizar-el-desempeno-de-react">Componentes React Eficientes: Una Guía para Optimizar el Desempeño de React</a></li>
  <li><a href="https://ourcodeworld.co/articulos/leer/934/top-9-las-mejores-tecnicas-de-optimizacion-para-aplicaciones-react">Top 9: Las Mejores técnicas de optimización para aplicaciones React</a></li>
</ul>]]></content><author><name>Eva Villarreal Guzmán</name></author><category term="react" /><category term="react" /><category term="performance" /><summary type="html"><![CDATA[Performance has an impact on the quality of the application and the user experience. There are different decisions that impact the overall performance of an application, from how we code to how the application infrastructure is configured. In this post we will focus on how to write our React applications to optimize them. Internally, React uses several techniques to minimize the number of costly DOM operations required to update the UI. This will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.]]></summary></entry></feed>