I"E<p>When you are using Docker in development environment and you use some tool that generates files during development, such as  dependecies managment (e.g. npm, composer) or to compile task (e.g. SCSS to CSS), if you try to delete or modify these files generated by the tool, maybe you will find with permission denied.</p>

<p>We’ll try to undertand why this happens and how you can fix it.</p>

<h2 id="the-problem">The problem</h2>

<p>Let’s start with a container that uses composer to manage the project’s dependencies:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 composer require psr/log
</code></pre></div></div>

<p>If you list the folder, you can see that the user who owns the folders/files generated by composer is root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 20K
drwxrwxr-x. 3 eva       eva       4.0K mar  27 18:31 ./
drwxr-xr-x. 7 eva       eva       4.0K mar  27 18:29 ../
drwxr-xr-x. 4 root      root      4.0K mar  27 18:31 vendor/
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root      root        53 mar  27 18:31 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 root      root      2.1K mar  27 18:31 composer.lock
</code></pre></div></div>

<p>So if you try to remove/modify it, you’ll get a permissions error:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">''</span> <span class="o">&gt;</span> composer.json 
bash: composer.json: Permission denied
</code></pre></div></div>

<p>To undertand why this happens, you need to undertand how Linux map the uid (user identifier) and the gid (group identifier).</p>

<p>The Linux kernel is responsible for managing the uid and gid space, and it is the kernel-level syscalls that are used to determine whether the requested privileges should be granted. For example, when a process attempts to write to a file, the kernel examines the uid and gid that created the process to determine if it has sufficient privileges to modify the file. <strong>The important to grant or not privileges is the uid, not the username</strong>.</p>

<p>When we run docker containers, there’s still uses the same kernel as the host. That is, all the processes running inside the containers share the same kernel of the host kernel. This kernel, as we said before, manages all uid and gid.</p>

<p>So you can’t have different users with the same uid inside different containers. So why can I define different usernames (and group names) between containers that have the same uid (and gid)? This is because <strong>username (and group names) that appear in common Linux tools are not part of the kernel, but are managed by external tools</strong> (/etc/passwd, LDAP, Kerberos , etc.). So you might see different usernames, since both host and containers have their own separate list of users and groups in /etc/passwd and /etc/group respectively, but you can’t have different privileges to the same uid/gid.</p>

<p>Now, why are the folders/files generated by composer owned by root?</p>

<p>The reason this happens is that Docker runs on Linux as root, if you follow the recommendations of the official installation. So when you create a new container, it’s not created by the current user, but by the root user which is the daemon running underneath. This is important to consider in order to build a secure system, <strong>if no other option is provided, such as passing a different uid in the Dockerfile, the processes in the containers will run as root</strong>.</p>

<p>You can verify this as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="nb">whoami
</span>root
</code></pre></div></div>

<p>As you can see, the result of <code class="language-plaintext highlighter-rouge">whoami</code> (which returns the current user) in the container is root. If you run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="se">\</span>
        bash <span class="nt">-c</span> <span class="s2">"echo </span><span class="se">\$</span><span class="s2">(id -u </span><span class="se">\$</span><span class="s2">{USER}):</span><span class="se">\$</span><span class="s2">(id -g </span><span class="se">\$</span><span class="s2">{USER})"</span>
0:0
</code></pre></div></div>

<p>You’ll see that the id of the user and group inside the container is 0.</p>

<blockquote>
  <p>It is important to remember that in Linux the root user/group has an id, by convention, which is 0.</p>
</blockquote>

<h2 id="solution-1">Solution 1</h2>

<p>You can run the Docker container as your local user, passing the uid and gid. You can try this as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    <span class="nt">-u</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    composer:2.2 composer require psr/log
</code></pre></div></div>

<p>If you list the folder, you can see that the user who owns the folders/files generated by composer is the local user:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span>
total 20K
drwxrwxr-x. 3 eva eva 4.0K mar  27 19:04 ./
drwxr-xr-x. 7 eva eva 4.0K mar  27 18:29 ../
drwxr-xr-x. 4 eva eva 4.0K mar  27 19:04 vendor/
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 eva eva   53 mar  27 19:04 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 eva eva 2.1K mar  27 19:04 composer.lock
</code></pre></div></div>

<p>Depending on the project being considered, this solution may have a problem. Inside the container, the user is not longer root. If the application inside the container requires perform tasks as root, you’ll get permissions error inside the container. For example, if you want to run a web application with PHP-FPM:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    <span class="nt">-u</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    composer:2.2 <span class="nb">touch</span> /var/lib/php/sessions/foo
<span class="nb">touch</span>: cannot <span class="nb">touch</span> <span class="s1">'/var/lib/php/sessions/foo'</span>: Permission denied
</code></pre></div></div>

<p>This is because the folder <code class="language-plaintext highlighter-rouge">/var/lib/php/sessions</code> is owned by <code class="language-plaintext highlighter-rouge">www-data:www-data</code>, which most likely does not share your local user’s IDs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    composer:2.2 <span class="se">\</span>
        bash <span class="nt">-c</span> <span class="s2">"echo </span><span class="se">\$</span><span class="s2">(id -u www-data):</span><span class="se">\$</span><span class="s2">(id -g www-data)"</span>
33:33
</code></pre></div></div>

<h2 id="solution-2">Solution 2</h2>

<p>You can replace the internal user/group IDs with known, good values. In this way, you can change the uid/guid of www-data in the container, passing it the uid/guid of the local user.</p>

<p>To do this, you must first create the Dockerfile file to perform this task:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM composer:2.2

ARG USER_ID
ARG GROUP_ID

RUN if [ ${USER_ID:-0} -ne 0 ] &amp;&amp; [ ${GROUP_ID:-0} -ne 0 ]; then \
    userdel -f www-data &amp;&amp;\
    if getent group www-data ; then groupdel www-data; fi &amp;&amp;\
    groupadd -g ${GROUP_ID} www-data &amp;&amp;\
    useradd -l -u ${USER_ID} -g www-data www-data &amp;&amp;\
    install -d -m 0755 -o www-data -g www-data /home/www-data &amp;&amp;\
    chown --changes --silent --no-dereference --recursive \
          --from=33:33 ${USER_ID}:${GROUP_ID} \
        /home/www-data \
        /.composer \
        /var/run/php-fpm \
        /var/lib/php/sessions \
;fi
        
USER www-data
</code></pre></div></div>

<p>Basically what you do in this Dockerfile is pass the id of our current user/group on the host as an environment variable in the container. In the <code class="language-plaintext highlighter-rouge">if [ ${USER_ID:-0} -ne 0 ] &amp;&amp; [ ${GROUP_ID:-0} -ne 0 ]; then</code> line, you allow the USER_ID and GROUP_ID variables to be optional. If both are not defined, the process that follows is skipped. This makes the Dockerfile usable for both development and production purposes.</p>

<p>In case the variables are defined, the user and group www-data are eliminated:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    userdel -f www-data &amp;&amp;\
    if getent group www-data ; then groupdel www-data; fi &amp;&amp;\
</code></pre></div></div>

<p>Then, the user/group are recreated with the default values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    useradd -l -u ${USER_ID} -g www-data www-data &amp;&amp;\
</code></pre></div></div>

<p>Also, a folder for the user www-data is generated. This is useful if you need your container to perform SSH actions using your host’s SSH keys.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    install -d -m 0755 -o www-data -g www-data /home/www-data &amp;&amp;\
</code></pre></div></div>

<p>In the next line, change the owner to folders that may require updating. In this way, permission error are avoided. To know which are the folders that need to be updated, you can look at the Dockerfile of the image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    chown --changes --silent --no-dereference --recursive \
          --from=33:33 ${USER_ID}:${GROUP_ID} \
        /home/www-data \
        /.composer \
        /var/run/php-fpm \
        /var/lib/php/sessions \
</code></pre></div></div>

<p>Now, build the image:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker image build <span class="se">\</span>
    <span class="nt">--build-arg</span> <span class="nv">USER_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--build-arg</span> <span class="nv">GROUP_ID</span><span class="o">=</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">-t</span> php_test <span class="se">\</span>
    <span class="nb">.</span>
</code></pre></div></div>

<p>Run composer:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container run <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/var/www <span class="se">\</span>
    <span class="nt">-w</span> /var/www <span class="se">\</span>
    php_test:latest composer require psr/log
</code></pre></div></div>

<p>And if you list the folder, you can see as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lan</span>
total 24K
drwxrwxr-x. 3 1000 1000 4.0K mar  27 19:24 ./
drwxr-xr-x. 7 1000 1000 4.0K mar  27 18:29 ../
drwxr-xr-x. 4 1000 1000 4.0K mar  27 19:24 vendor/
<span class="nt">-rw-rw-r--</span><span class="nb">.</span> 1 1000 1000  545 mar  27 19:19 Dockerfile
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 1000 1000   53 mar  27 19:24 composer.json
<span class="nt">-rw-r--r--</span><span class="nb">.</span> 1 1000 1000 2.1K mar  27 19:24 composer.lock
</code></pre></div></div>

<p>The vendor folder generated by composer is owned by the local user’s uid/gid. Inside the container, www-data has this uid/gid. Now you can delete/update without permissions error.</p>

<h3 id="use-docker-compose">Use Docker Compose</h3>

<p>The equivalent docker-compose.yml for this example would be:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
      <span class="na">args</span><span class="pi">:</span>
        <span class="na">USER_ID</span><span class="pi">:</span> <span class="s">${USER_ID:-0}</span>
        <span class="na">GROUP_ID</span><span class="pi">:</span> <span class="s">${GROUP_ID:-0}</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${HOME}/.composer:/.composer</span>
      <span class="pi">-</span> <span class="s">${PWD}:/var/www</span>
</code></pre></div></div>

<p>The user/group id must be defined in an .env file as below. Docker compose cannot parse commands, so <code class="language-plaintext highlighter-rouge">$(id -u ${USER})</code> would not work in the yaml file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>USER_ID=1000
GROUP_ID=1000
</code></pre></div></div>

<p>To build the image and run the container, run as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d --build
</code></pre></div></div>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="https://jtreminio.com/blog/running-docker-containers-as-current-host-user/#ok-so-what-actually-works/">Running Docker Containers as Current Host User</a></li>
  <li><a href="https://www.youtube.com/watch?v=0xUwaz0MD_E">Esto no me lo imaginaba - UID y GIDs en Docker</a></li>
  <li><a href="https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf">Understanding how uid and gid work in Docker containers</a></li>
</ul>

:ET