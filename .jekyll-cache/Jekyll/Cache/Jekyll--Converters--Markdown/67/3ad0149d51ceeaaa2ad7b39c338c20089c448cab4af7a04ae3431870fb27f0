I"∑¬<p>Para entender porque necesitamos implementar cach√© en nuestras web, entendamos primero que pasa cuando interactuamos con un servidor web.</p>

<p>Cada vez que se realiza una <em>request</em> a una aplicaci√≥n web suceden un conjunto de cosas en tu servidor, por ejemplo:</p>

<ul>
  <li>Probablemente se conectar√° a una o varias bases de datos.</li>
  <li>Tambi√©n puede que se accedan a archivos locales o se realicen c√°lculos matem√°ticos, generando una carga en la CPU.</li>
</ul>

<p>Es decir, cada <em>request</em> tiene una cierta cantidad de demanda de CPU y disco de red y, en algunas aplicaciones especializadas, incluso puede haber otras cosas involucradas.</p>

<p>Todas esas cosas son las que afectan el tiempo que pasa entre que las <em>requests</em> llegan al servidor web y √©ste pueda generar la respuesta y ser enviada al usuario. Por lo tanto cuanto m√°s disco o CPU se use y cuanto m√°s se acceda a una base de datos, m√°s lenta ser√° la respuesta de su servidor.</p>

<p>Si se realiza otra <em>request</em> para ese mismo contenido, en la mayor√≠a de los casos ocurrir√° exactamente lo mismo y su servidor tendr√° que manejar ese acceso al disco en esa red y esa sobrecarga de CPU requerida para la <em>request</em> por segunda o tercera vez o varias veces. ¬øQu√© ocurre cuando algunos de estos recursos comienza a acercarse a su l√≠mite? Se empezar√° a ralentizar o provocar√° un error. Por ejemplo esto sucede si la CPU alcanza los l√≠mites de su servidor, si el acceso al disco es tan lento que las cosas comienzan a agotarse o si la carga de su base de datos es tan pesada que nuevamente obtiene un error de <em>time out</em> o incluso el servidor web podr√≠a agotar el <em>time out</em> esperando la base de datos responder.</p>

<p>La forma m√°s f√°cil de reducir el uso de estos recursos es almacenar en cach√© los datos cuando se generan. De esta manera el objetivo es que se pueden atender la mayor cantidad de <em>requests</em> posibles directamente desde la memoria, minimizando el uso de CPU o disco de red y el acceso a la base de datos.</p>

<p>Esto tendr√° algunos costos:</p>
<ul>
  <li>Su c√≥digo ser√° un poco m√°s complejo, no demasiado, pero tendr√° que escribir un c√≥digo adicional.</li>
  <li>Requerir√° memoria adicional y eso podr√≠a tener un efecto en el tipo de servidor que puede usar para su servidor. Dependiendo de qu√© es exactamente lo que vas a almacenar en cach√©, es posible que no requieras mucha memoria.</li>
</ul>

<p>Si est√° dise√±ando un servicio web para que miles de usuarios seguramente la cach√© ser√° uno de los mecanismo que utilice. Ya que cuantas m√°s <em>requests</em> pueda manejar con los mismos recursos, menos servidores necesitar√°, lo cual es m√°s barato y tambi√©n podr√≠a significar que puede usar una sola base de datos para su aplicaci√≥n en lugar de m√∫ltiples bases de datos.</p>

<p>Ahora yendo particularmente a Yii2, el <em>caching</em> es una de las caracter√≠sticas que el <em>framework</em> provee y a continuaci√≥n profundizamos.</p>

<h2 id="claves-de-cach√©"><a href="#header-2"></a>Claves de Cach√©</h2>

<p>Es importante tener en cuenta que cada elemento de datos almacenado en cach√© se identifica por una <strong>clave</strong>. Cuando se almacena un elemento de datos en la memoria cach√©, se debe especificar una clave. M√°s tarde, cuando se recupera el elemento de datos de la memoria cach√©, se debe proporcionar la clave correspondiente.</p>

<p>Puedes utilizar una cadena o un valor arbitrario como una clave de cach√©. Cuando una clave no es una cadena de texto, √©sta ser√° autom√°ticamente serializada en una cadena.</p>

<p>Una estrategia com√∫n para definir una clave de cach√© es incluir en ella todos los factores determinantes en t√©rminos de un array. Por ejemplo, <code class="language-plaintext highlighter-rouge">yii\db\Schema</code> utiliza la siguiente clave para almacenar en cach√© la informaci√≥n del esquema de una tabla de base de datos:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
    <span class="k">__CLASS__</span><span class="p">,</span>              <span class="c1">// nombre de la clase del esquema</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dsn</span><span class="p">,</span>         <span class="c1">// nombre del origen de datos de la conexi√≥n BD</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">,</span>    <span class="c1">// usuario para la conexi√≥n BD</span>
    <span class="nv">$name</span><span class="p">,</span>                  <span class="c1">// nombre de la tabla</span>
<span class="p">];</span>
</code></pre></div></div>
<p>Como puedes ver, la clave incluye toda la informaci√≥n necesaria para especificar de una forma exclusiva una tabla de base de datos.</p>

<p>Cuando en un mismo almacenamiento en cach√© es utilizado por diferentes aplicaciones, se deber√≠a especificar un prefijo √∫nico para las claves de la cach√© por cada una de las aplicaciones para as√≠ evitar conflictos.Por ejemplo, en la configuraci√≥n de la aplicaci√≥n podr√≠as escribir el siguiente c√≥digo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'components'</span> <span class="o">=&gt;</span> <span class="p">[</span>
    <span class="s1">'cache'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\caching\ApcCache'</span><span class="p">,</span>
        <span class="s1">'keyPrefix'</span> <span class="o">=&gt;</span> <span class="s1">'myapp'</span><span class="p">,</span>       <span class="c1">// un prefijo de clave de cach√© √∫nico</span>
    <span class="p">],</span>
<span class="p">],</span>
</code></pre></div></div>

<h2 id="formas-de-invalidar-un-elemento-de-cach√©"><a href="#header-2"></a>Formas de invalidar un elemento de cach√©</h2>

<p>Un elemento de datos almacenado en la memoria cach√© permanecer√° en ella para siempre, a menos que sea removida de alguna manera debido a alguna directiva de cach√© (ej. el espacio de almacenamiento en cach√© est√° lleno y los datos m√°s antiguos se eliminan). Para cambiar este comportamiento Yii provee diferentes mecanismos que se env√≠an por par√°metro al guardar el elemento de dato para invalidar un elemento de cach√©:</p>

<h3 id="caducidad-de-cach√©"><a href="#header-3"></a>Caducidad de Cach√©</h3>

<p>El par√°metro nos indica por cu√°ntos segundos el elemento se mantendr√° v√°lido en memoria cach√©. Cuando llames get() para recuperar el elemento, si el tiempo de caducidad ha pasado, el m√©todo devolver√° <code class="language-plaintext highlighter-rouge">false</code>, indicando que el elemento de datos no ha sido encontrado en la memoria cach√©.</p>

<h3 id="dependencias"><a href="#header-3"></a>Dependencias</h3>

<p>Los datos almacenados en cach√© pueden tambi√©n ser invalidados conforme a algunos cambios en la cach√© de dependencias, donde las disponibles son:</p>

<ul>
  <li>yii\caching\ChainedDependency: la dependencia cambia si cualquiera de las dependencias en la cadena cambia.</li>
  <li>yii\caching\DbDependency: la dependencia cambia si el resultado de la consulta de la sentencia SQL especificada cambia.</li>
  <li>yii\caching\ExpressionDependency: la dependencia cambia si el resultado de la expresi√≥n de PHP especificada cambia.</li>
  <li>yii\caching\FileDependency: la dependencia cambia si se modifica la √∫ltima fecha de modificaci√≥n del archivo.</li>
  <li>yii\caching\TagDependency: marca un elemento de datos en cach√© con uno o m√°s <em>tags</em>. Cada <em>tag</em> puede ser invalidado llamando a yii\caching\TagDependency::invalidate(), de manera que invalidar√≠a a todos los elementos de datos que contienen dicho <em>tag</em>.</li>
</ul>

<h2 id="mecanismos-de-cach√©"><a href="#header-2"></a>Mecanismos de cach√©</h2>

<h3 id="cach√©-de-datos"><a href="#header-3"></a>Cach√© de datos</h3>

<p>Es el mecanismo m√°s b√°sico y suele ser la base de los dem√°s mecanismos. Trata del almacenamiento de alguna variable PHP en cach√© y recuperarla m√°s tarde.</p>

<p>El siguiente c√≥digo muestra el patr√≥n t√≠pico de uso para el almacenamiento en cach√©:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// intenta recuperar $data de la cach√©</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="nv">$cache</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$data</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// $data no ha sido encontrada en la cach√©, calcularla desde cero</span>
    <span class="nv">$data</span> <span class="o">=</span> <span class="nc">Products</span><span class="o">::</span><span class="nf">findOne</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
    <span class="c1">// guardar $data en cach√© para as√≠ recuperarla la pr√≥xima vez</span>
    <span class="nv">$cache</span><span class="o">-&gt;</span><span class="nf">set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// $data est√° disponible aqu√≠</span>
</code></pre></div></div>

<p>El siguiente c√≥digo se puede escribir tambi√©n como:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$cache</span><span class="o">-&gt;</span><span class="nf">getOrSet</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">Products</span><span class="o">::</span><span class="nf">findOne</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div></div>

<h3 id="cach√©-de-consultas"><a href="#header-3"></a>Cach√© de consultas</h3>

<p>La cach√© de consultas es una caracter√≠stica especial de cach√© construido sobre el almacenamiento de cach√© de datos. Se proporciona para almacenar en cach√© el resultado de consultas a la base de datos.</p>

<p>Las consultas en cach√© requieren una <code class="language-plaintext highlighter-rouge">DB connection</code> y un componente de aplicaci√≥n cach√© v√°lido. Las implementaciones de cach√© de consultas podemos verlos en los siguientes c√≥digos para los diferentes casos:</p>

<h4 id="cach√©-de-raw-query"><a href="#header-4"></a>Cach√© de <em>raw query</em></h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$db</span> <span class="o">=</span> <span class="nc">Client</span><span class="o">::</span><span class="nf">getDb</span><span class="p">();</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$db</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Yii\db\Query</span><span class="p">;</span>
    <span class="nv">$query</span><span class="o">-&gt;</span><span class="nf">select</span><span class="p">(</span><span class="s2">"client.*"</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="nf">from</span><span class="p">(</span><span class="s1">'client'</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="nf">where</span><span class="p">([</span><span class="s1">'client.id'</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="nf">one</span><span class="p">();</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="nf">createCommand</span><span class="p">();</span>
    <span class="nv">$result</span>  <span class="o">=</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="nf">queryAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="cach√©-de-activerecord"><a href="#header-4"></a>Cach√© de ActiveRecord</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$result</span> <span class="o">=</span> 
<span class="nv">$db</span> <span class="o">=</span> <span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">;</span><span class="c1">// or Category::getDb()</span>
<span class="nv">$dep</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DbDependency</span><span class="p">();</span>
<span class="nv">$dep</span><span class="o">-&gt;</span><span class="n">sql</span> <span class="o">=</span> <span class="s1">'SELECT count(*) FROM category'</span><span class="p">;</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$db</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nc">Category</span><span class="o">::</span><span class="nf">find</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">where</span><span class="p">([</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">])</span><span class="o">-&gt;</span><span class="nf">all</span><span class="p">();</span>
<span class="p">},</span> <span class="no">CACHE_TIMEOUT</span><span class="p">,</span> <span class="nv">$dep</span><span class="p">);</span>
</code></pre></div></div>

<h5 id="cach√©-en-activequery--all-y--one"><a href="#header-5"></a>Cach√© en ActiveQuery -&gt;all() y -&gt;one()</h5>

<p>Puede habilitar f√°cilmente el almacenamiento en cach√© de todas las consultas para una tabla determinada siguiendo el ejemplo siguiente. Digamos que tenemos una tabla de <strong>clientes</strong> y deseamos almacenar en cach√© los datos del cliente durante 10 minutos (600 segundos). Primero agregue un archivo <strong>ClientQuery.php</strong> en el mismo directorio que su modelo <strong>Client.php</strong> y configure <code class="language-plaintext highlighter-rouge">$queryCacheDuration</code> en segundos:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">app\models\application</span><span class="p">;</span>

<span class="cd">/**
 * This is the ActiveQuery class for [[Client]].
 *
 * @see Client
 */</span>
<span class="kd">class</span> <span class="nc">ClientQuery</span> <span class="kd">extends</span> <span class="nc">Yii\db\ActiveQuery</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="nv">$queryCacheDuration</span> <span class="o">=</span> <span class="mi">600</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Luego agrega un m√©todo find() en tu modelo para que haga referencia a <strong>ClientQuery</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/**
 * @inheritdoc
 * @return ClientQuery the active query used by this AR class.
 */</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">find</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="k">new</span> <span class="nc">ClientQuery</span><span class="p">(</span><span class="nb">get_called_class</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Alternativamente, puede anular las rutinas all () y one () y configurar el uso de la cach√© all√≠ (nuevamente, en su archivo <strong>ClientQuery.php</strong>):</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">app\models\application</span><span class="p">;</span>

<span class="cd">/**
 * This is the ActiveQuery class for [[Client]].
 *
 * @see Client
 */</span>
<span class="kd">class</span> <span class="nc">ClientQuery</span> <span class="kd">extends</span> <span class="nc">Yii\db\ActiveQuery</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">all</span><span class="p">(</span><span class="nv">$db</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="nf">all</span><span class="p">(</span><span class="nv">$db</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">one</span><span class="p">(</span><span class="nv">$db</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="nf">one</span><span class="p">(</span><span class="nv">$db</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="cach√©-de-una-consulta-basada-en-relaciones"><a href="#header-5"></a>Cach√© de una consulta basada en relaciones</h5>

<p>La acci√≥n en el controlador (sin cach√©) es:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$model</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">findModel</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
<span class="nv">$issues</span> <span class="o">=</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="nf">getCurrentIssues</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="nf">orderBy</span><span class="p">(</span><span class="s1">'ID DESC'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">all</span><span class="p">();</span>
<span class="nv">$retVal</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">renderAjax</span><span class="p">(</span><span class="s1">'issues/issues'</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">'model'</span> <span class="o">=&gt;</span> <span class="nv">$model</span><span class="p">,</span>
    <span class="s1">'issues'</span> <span class="o">=&gt;</span> <span class="nv">$issues</span>
</code></pre></div></div>

<p>Donde $model-&gt;getCurrentIssues() es una relaci√≥n en el modelo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getCurrentIssues</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">hasMany</span><span class="p">(</span><span class="nc">Issue</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">'SiteID'</span> <span class="o">=&gt;</span> <span class="s1">'ID'</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="nf">onCondition</span><span class="p">([</span><span class="s1">'Deleted'</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="nf">andOnCondition</span><span class="p">([</span><span class="s1">'in'</span><span class="p">,</span> <span class="s1">'IssueStatusID'</span><span class="p">,</span> <span class="p">(</span><span class="k">new</span> <span class="nc">Yii\db\Query</span><span class="p">())</span><span class="o">-&gt;</span><span class="nf">select</span><span class="p">(</span><span class="s1">'ID'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">from</span><span class="p">(</span><span class="s1">'issue_status'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">where</span><span class="p">([</span><span class="s1">'Code'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'REOPENED'</span><span class="p">,</span> <span class="s1">'CONFIRMED'</span><span class="p">,</span> <span class="s1">'NEW'</span><span class="p">]])]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Para optimizar la acci√≥n en el controlador con cach√© se deber√≠a cambiar de la siguiente forma:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$db</span> <span class="o">=</span> <span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">;</span>
<span class="nv">$model</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">findModel</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
<span class="nv">$issues</span> <span class="o">=</span> <span class="nc">Issue</span><span class="o">::</span><span class="nf">getDb</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$db</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="nv">$model</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="nf">getPastIssues</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="nf">orderBy</span><span class="p">(</span><span class="s1">'ID DESC'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">all</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">60</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</code></pre></div></div>

<p>Ac√° es importante resaltar que configurar la relaci√≥n del modelo de la siguiente forma no funciona:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getCurrentIssues</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$db</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">hasMany</span><span class="p">(</span><span class="nc">Issue</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">'SiteID'</span> <span class="o">=&gt;</span> <span class="s1">'ID'</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="nf">onCondition</span><span class="p">([</span><span class="s1">'Deleted'</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="nf">andOnCondition</span><span class="p">([</span><span class="s1">'in'</span><span class="p">,</span> <span class="s1">'IssueStatusID'</span><span class="p">,</span> <span class="p">(</span><span class="k">new</span> <span class="nc">Yii\db\Query</span><span class="p">())</span><span class="o">-&gt;</span><span class="nf">select</span><span class="p">(</span><span class="s1">'ID'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">from</span><span class="p">(</span><span class="s1">'issue_status'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">where</span><span class="p">([</span><span class="s1">'Code'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'REOPENED'</span><span class="p">,</span> <span class="s1">'CONFIRMED'</span><span class="p">,</span> <span class="s1">'NEW'</span><span class="p">]])]);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Ya que el m√©todo cache () es activar y desactivar la cach√© de consultas cuando se llama el <em>callback</em>. Tenga en cuenta que hasMany() o hasOne() no realizan ninguna consulta a la base de datos, por lo que la cach√© de esta manera no tiene ning√∫n efecto.</p>

<h4 id="cach√©-de-search-model"><a href="#header-4"></a>Cach√© de Search Model</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$db</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$dataProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$dataProvider</span><span class="o">-&gt;</span><span class="nf">prepare</span><span class="p">();</span>  <span class="c1">// lanzar consulta a base de datos</span>
    <span class="c1">// o si desea realizar consultas de base de datos AR, puede hacer lo siguiente:</span>
    <span class="c1">// $customers = Customer::find()-&gt;all();</span>
<span class="p">});</span>

<span class="k">return</span> <span class="nv">$dataProvider</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>Nota: Algunas bases de datos, como por ejemplo MySQL, soporta el almacenamiento en cach√© desde el mismo servidor de la base de datos. Puedes optar por utilizar cualquiera de los mecanismos de memoria cach√©. El almacenamiento en cach√© de consultas previamente descrito tiene la ventaja que de que se puede especificar dependencias de cach√© de una forma flexible y son potencialmente mucho m√°s eficientes.</p>
</blockquote>

<h2 id="cach√©-de-fragmentos"><a href="#header-2"></a>Cach√© de Fragmentos</h2>

<p>La Cach√© de Fragmentos se refiere al almacenamiento en cach√© de una secci√≥n de una p√°gina Web.</p>

<p>Para usar la cach√© de fragmentos, utiliza el siguiente c√≥digo en tu vista:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">beginCache</span><span class="p">(</span><span class="nv">$id</span><span class="p">))</span> <span class="p">{</span>

    <span class="c1">// ... generar contenido aqu√≠ ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">endCache</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Es decir, encierra la l√≥gica de la generaci√≥n del contenido entre las llamadas beginCache() y endCache(). Si el contenido se encuentra en la memoria cach√©, beginCache() mostrar√° el contenido y devolver√° <code class="language-plaintext highlighter-rouge">false</code>, saltandose as√≠ la l√≥gica de generaci√≥n del contenido. De lo contrario, el c√≥digo de generaci√≥n se ejecutar√≠a y al alcanzar la llamada endCache(), el contenido generado ser√° capturado y almacenado en la memoria cach√©.</p>

<h3 id="opciones-de-cach√©"><a href="#header-3"></a>Opciones de Cach√©</h3>

<h4 id="caducidad"><a href="#header-4"></a>Caducidad</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">beginCache</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="p">[</span><span class="s1">'duration'</span> <span class="o">=&gt;</span> <span class="mi">3600</span><span class="p">]))</span> <span class="p">{</span>

    <span class="c1">// ... generar contenido aqu√≠ ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">endCache</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="dependencias-1"><a href="#header-4"></a>Dependencias</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$dependency</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\caching\DbDependency'</span><span class="p">,</span>
    <span class="s1">'sql'</span> <span class="o">=&gt;</span> <span class="s1">'SELECT MAX(updated_at) FROM post'</span><span class="p">,</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">beginCache</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="p">[</span><span class="s1">'dependency'</span> <span class="o">=&gt;</span> <span class="nv">$dependency</span><span class="p">]))</span> <span class="p">{</span>

    <span class="c1">// ... generar contenido aqu√≠ ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">endCache</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="variaciones"><a href="#header-4"></a>Variaciones</h4>

<p>El contenido almacenado en cach√© puede variar de acuerdo a ciertos par√°metros. Por ejemplo, para una aplicaci√≥n Web que soporte multiples idiomas, la misma pieza del c√≥digo de la vista puede generar el contenido almacenado en cach√© en diferentes idiomas. Por lo tanto, es posible que desees hacer variaciones del mismo contenido almacenado en cach√© de acuerdo con la actual selecci√≥n del idioma en la aplicaci√≥n.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">beginCache</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="p">[</span><span class="s1">'variations'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">language</span><span class="p">]]))</span> <span class="p">{</span>

    <span class="c1">// ... generar c√≥digo aqu√≠ ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">endCache</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="alternando-el-almacenamiento-en-cach√©"><a href="#header-3"></a>Alternando el Almacenamiento en Cach√©</h3>

<p>Puede que a veces quieras habilitar la cach√© de fragmentos √∫nicamente cuando ciertas condiciones se cumplan. Por ejemplo, para una p√°gina que muestra un formulario, tal vez quieras guardarlo en la cach√© cuando es inicialmente solicitado (a trav√©s de una petici√≥n <code class="language-plaintext highlighter-rouge">GET</code>). Cualquier muestra posterior (a trav√©s de una petici√≥n <code class="language-plaintext highlighter-rouge">POST</code>) del formulario no deber√≠a ser almacenada en cach√© ya que el formulario puede que contenga entradas del usuario. Para hacerlo, podr√≠as configurar la opci√≥n de activado (<code class="language-plaintext highlighter-rouge">enabled</code>), de la siguiente manera:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">beginCache</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="p">[</span><span class="s1">'enabled'</span> <span class="o">=&gt;</span> <span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">isGet</span><span class="p">]))</span> <span class="p">{</span>

    <span class="c1">// ... generar contenido aqu√≠ ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">endCache</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cach√©-de-p√°ginas"><a href="#header-2"></a>Cach√© de p√°ginas</h2>

<p>La cach√© de p√°ginas se refiere a guardar el contenido de toda una p√°gina en el almacenamiento de cach√© del servidor. Posteriormente, cuando la misma p√°gina sea requerida de nuevo, su contenido ser√° devuelto desde la cach√© en vez de volver a generarlo desde cero.</p>

<p>El almacenamiento en cach√© de p√°ginas est√° soportado por <code class="language-plaintext highlighter-rouge">yii\filters\PageCache</code>, un filtro de acci√≥n. Puede ser utilizado de la siguiente forma en un controlador:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">behaviors</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="p">[</span>
            <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\filters\PageCache'</span><span class="p">,</span>
            <span class="s1">'only'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'index'</span><span class="p">],</span>
            <span class="s1">'duration'</span> <span class="o">=&gt;</span> <span class="mi">60</span><span class="p">,</span>
            <span class="s1">'variations'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">language</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="s1">'dependency'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\caching\DbDependency'</span><span class="p">,</span>
                <span class="s1">'sql'</span> <span class="o">=&gt;</span> <span class="s1">'SELECT COUNT(*) FROM post'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El c√≥digo anterior establece que el almacenamiento de p√°ginas en cach√© debe ser utilizado s√≥lo en la acci√≥n index; el contenido de la p√°gina deber√≠a almacenarse durante un m√°ximo de 60 segundos y ser variado por el idioma actual de la aplicaci√≥n; adem√°s, el almacenamiento de la p√°gina en cach√© deber√≠a ser invalidado si el n√∫mero total de art√≠culos ha cambiado.</p>

<p>Como puedes ver, la cach√© de p√°ginas es muy similar a la cach√© de fragmentos. Ambos soportan opciones tales como <code class="language-plaintext highlighter-rouge">duration</code>, <code class="language-plaintext highlighter-rouge">dependencies</code>, <code class="language-plaintext highlighter-rouge">variations</code>, y <code class="language-plaintext highlighter-rouge">enabled</code>. Su principal diferencia es que la cach√© de p√°ginas est√° implementado como un filtro de acci√≥n mientras que la cach√© de fragmentos se hace en un <em>widget</em>.</p>

<h2 id="cach√©-http"><a href="#header-2"></a>Cach√© HTTP</h2>

<p>Las aplicaciones Web pueden hacer uso de la cach√© en el lado del cliente para as√≠ ahorrar tiempo y recursos para generar y transmitir el mismo contenido una y otra vez.</p>

<p>Para usar la cach√© del lado del cliente, puedes configurar <code class="language-plaintext highlighter-rouge">yii\filters\HttpCache</code> como un filtro en el controlador para aquellas acciones cuyo resultado deba estar almacenado en la cach√© en el lado del cliente. <code class="language-plaintext highlighter-rouge">HttpCache</code> solo funciona en peticiones <code class="language-plaintext highlighter-rouge">GET</code> y <code class="language-plaintext highlighter-rouge">HEAD</code>. Puede manejar tres tipos de cabeceras (headers) HTTP relacionadas en este tipo de consultas:</p>

<h3 id="la-cabecera-last-modified"><a href="#header-3"></a>La Cabecera Last-Modified</h3>

<p>La cabecera Last-Modified usa un sello de tiempo para indicar si la p√°gina ha sido modificada desde que el cliente la almacena en la cach√©.</p>

<p>El siguiente es un ejemplo haciendo uso de la cabecera Last-Modified:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">behaviors</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="p">[</span>
            <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\filters\HttpCache'</span><span class="p">,</span>
            <span class="s1">'only'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'index'</span><span class="p">],</span>
            <span class="s1">'lastModified'</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$action</span><span class="p">,</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Yii\db\Query</span><span class="p">();</span>
                <span class="k">return</span> <span class="nv">$q</span><span class="o">-&gt;</span><span class="nf">from</span><span class="p">(</span><span class="s1">'post'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">max</span><span class="p">(</span><span class="s1">'updated_at'</span><span class="p">);</span>
            <span class="p">},</span>
        <span class="p">],</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El c√≥digo anterior establece que la memoria cach√© HTTP debe ser habilitada √∫nicamente por la acci√≥n index. Se debe generar una cabecera HTTP Last-Modified basado en el √∫ltimo tiempo de actualizaci√≥n de los art√≠culos. Cuando un navegador visita la p√°gina index la primera vez, la p√°gina ser√° generada en el servidor y enviada al navegador; Si el navegador visita la misma p√°gina de nuevo y no ning√∫n art√≠culo modificado durante el per√≠odo, el servidor no volver√° a regenerar la p√°gina, y el navegador usar√° la versi√≥n cach√© del lado del cliente. Como resultado, la representaci√≥n del lado del servidor y la transmisi√≥n del contenido de la p√°gina son ambos omitidos.</p>

<h3 id="la-cabecera-etag"><a href="#header-3"></a>La Cabecera ETag</h3>

<p>La cabecera <strong>Entity Tag</strong> (o para abreviar ETag) usa un <em>hash</em> para representar el contenido de una p√°gina. Si la p√°gina ha sido cambiada, el <em>hash</em> tambi√©n cambiar√°. Al comparar el <em>hash</em> guardado en el lado del cliente con el hash generado en el servidor, la cach√© puede determinar si la p√°gina ha cambiado y deber ser retransmitida.</p>

<p>El siguiente es un ejemplo de c√≥mo usar la cabecera ETag:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">behaviors</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="p">[</span>
            <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\filters\HttpCache'</span><span class="p">,</span>
            <span class="s1">'only'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'view'</span><span class="p">],</span>
            <span class="s1">'etagSeed'</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$action</span><span class="p">,</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">findModel</span><span class="p">(</span><span class="nc">Yii</span><span class="o">::</span><span class="nv">$app</span><span class="o">-&gt;</span><span class="n">request</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'id'</span><span class="p">));</span>
                <span class="k">return</span> <span class="nb">serialize</span><span class="p">([</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="n">title</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">]);</span>
            <span class="p">},</span>
        <span class="p">],</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El c√≥digo anterior establece que la cach√© HTTP debe ser activada √∫nicamente para la acci√≥n <em>view</em>. Deber√≠a generar una cabecera HTTP ETag bas√°ndose en el t√≠tulo y contenido del art√≠culo consultado. Cuando un navegador visita la p√°gina view por primera vez, la p√°gina se generar√° en el servidor y ser√° enviada al navegador; Si el navegador visita la misma p√°gina de nuevo y no ha ocurrido un cambio en el t√≠tulo o contenido del art√≠culo, el servidor no volver√° a generar la p√°gina, y el navegador usar√° la versi√≥n guardada en la cach√© del lado del cliente. Como resultado, la representaci√≥n del lado del servidor y la transmisi√≥n del contenido de la p√°gina son ambos omitidos.</p>

<p>ETags permiten estrategias de almacenamiento de cach√© m√°s complejas y/o mucho m√°s precisas que las cabeceras Last-Modified. Por ejemplo, un ETag puede ser invalidado si el sitio Web ha cambiado de tema (theme).</p>

<p>La generaci√≥n de un ETag que requiera muchos recursos puede echar por tierra el prop√≥sito de estar usando HttpCache e introducir una sobrecarga innecesaria, ya que debe ser re-evaluada en cada solicitud (request). Trata de encontrar una expresi√≥n sencilla para invalidar la cach√© si la p√°gina ha sido modificada.</p>

<h3 id="la-cabecera-cache-control"><a href="#header-3"></a>La Cabecera Cache-Control</h3>

<p>La cabecera Cache-Control especifica la directiva general de la cach√© para p√°ginas. Puedes enviarla configurando la propiedad <code class="language-plaintext highlighter-rouge">yii\filters\HttpCache::$cacheControlHeader</code> con el valor de la cabecera. Por defecto, la siguiente cabecera ser√° enviada:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cache-Control: public, max-age=3600
</code></pre></div></div>

<blockquote>
  <p>Cuando una p√°gina utiliza la sesi√≥n, PHP enviar√° autom√°ticamente cabeceras HTTP relacionadas con la cach√© tal y como se especifican en session.cache_limiter de la configuraci√≥n INI de PHP. Estas cabeceras pueden interferir o deshabilitar el almacenamiento de cach√© que desees de <code class="language-plaintext highlighter-rouge">HttpCache</code>. Para evitar este problema, por defecto <code class="language-plaintext highlighter-rouge">HttpCache</code> deshabilitar√° autom√°ticamente el env√≠o de estas cabeceras. Si deseas modificar este comportamiento, tienes que configurar la propiedad <code class="language-plaintext highlighter-rouge">yii\filters\HttpCache::$sessionCacheLimiter</code>. La propiedad puede tomar un valor de cadena, incluyendo <code class="language-plaintext highlighter-rouge">public</code>, <code class="language-plaintext highlighter-rouge">private</code>, <code class="language-plaintext highlighter-rouge">private_no_expire</code>, and <code class="language-plaintext highlighter-rouge">nocache</code>.</p>
</blockquote>

<blockquote>
  <p>Los robots de motores de b√∫squeda tienden a respetar las cabeceras de cach√©. Dado que algunos <em>crawlers</em> tienen limitado el n√∫mero de p√°ginas que pueden rastrear por dominios dentro de un cierto per√≠odo de tiempo, la introducci√≥n de cabeceras de cach√© pueden ayudar a la indexaci√≥n del sitio Web y reducir el n√∫mero de p√°ginas que deben ser procesadas.</p>
</blockquote>

<h3 id="limitaciones"><a href="#header-3"></a>Limitaciones</h3>

<p>El almacenamiento en cach√© de consultas no funciona con los resultados de consulta que contienen controladores de recursos. Por ejemplo, cuando se utiliza el tipo de columna BLOB en algunos DBMS, el resultado de la consulta devolver√° un recurso para manejar los datos de la columna.</p>

<p>Algunos sistemas de almacenamiento cach√© tienen limitaci√≥n de tama√±o. Por ejemplo, memcache limita el tama√±o m√°ximo de cada entrada a 1MB. Por lo tanto, si el tama√±o de un resultado de la consulta excede ese l√≠mite, el almacenamiento en cach√© fallar√°.</p>

<h3 id="logs-de-consultas-en-bases-de-datos"><a href="#header-3"></a>Logs de consultas en bases de datos</h3>

<p>Si se habilita los logs a nivel info en Yii2 se podr√°n observar las consultas que se est√©n realizando a la base de datos.</p>

<p>Esto puede ser √∫til al <em>debuggear</em> y ver por ejemplo si se esta realizando una consulta a la base de datos u obteniendo de cach√©.</p>

<p>Para habilitar este log debe agregar el siguiente array en el archivo web.php:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="mf">...</span>
   <span class="s1">'log'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'targets'</span> <span class="o">=&gt;</span> <span class="no">YII_DEBUG</span> <span class="o">?</span> <span class="p">[</span>
                <span class="p">[</span>
                    <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'yii\log\FileTarget'</span><span class="p">,</span>
                    <span class="s1">'levels'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                        <span class="s1">'info'</span><span class="p">,</span>
                    <span class="p">],</span>
                    <span class="s1">'logFile'</span> <span class="o">=&gt;</span> <span class="s1">'@runtime/logs/info.log'</span><span class="p">,</span>
                    <span class="s1">'logVars'</span> <span class="o">=&gt;</span> <span class="p">[],</span>
                <span class="p">],</span>
    <span class="mf">...</span>
</code></pre></div></div>

<h1 id="fuentes"><a href="#header-1"></a>Fuentes</h1>

<ul>
  <li><a href="https://www.yiiframework.com/doc/guide/2.0/es/caching-data">Almacenamiento de Datos en Cach√©?</a></li>
  <li><a href="https://www.youtube.com/watch?v=aRh2m_1nZF8/">Yii 2.0 Part 17 - Caching</a></li>
  <li><a href="https://www.itworkman.com/169213.html/">What are yii2‚Äôs cache dependencies? How do I use cache dependencies?</a></li>
  <li><a href="https://kb.zensoft.hu/yii2-caching-and-activerecord/#caching-in-a-search-model/">Yii2 Optimization &amp; Caching and ActiveRecord</a></li>
</ul>

<p>habilitar log 
configurar base de datos</p>
:ET