I"l<p>Let’s see, step by step, how configurate HTTPS with Docker Compose in a Apache server using a demo from the Yii framework.</p>

<p><a href="https://github.com/EvaVillarrealGuzman/demo">Here</a> you will find the final code.</p>

<h2 id="1--configure-the-development-environment">1- Configure the development environment</h2>

<p>In this first step, the goal is to configure the development environment machine to be able to do the tests with a fictitious domain at the end.</p>

<p>Suppose that the test will be done with the domain <strong>test.com.ar</strong>. So, edit the <strong>hosts</strong> file. The location of this file depends on the operating system:</p>

<ul>
  <li>In <strong>Linux</strong> you will find it in <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</li>
  <li>In <strong>Windows</strong> you will find it in <code class="language-plaintext highlighter-rouge">C:\Windows\System32\drivers\etc\hosts</code>.</li>
</ul>

<p>This file is used by the operating system to map a IP address to a host name or domain name.</p>

<p>Add the following line and save:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1       test.com.ar
</code></pre></div></div>

<h2 id="2--clone-the-project-from-github">2- Clone the project from Github</h2>

<p>We will use a <a href="https://github.com/yiisoft/demo">demo provided by the Yii framework</a> to explain how to configure HTTPS with Docker and Apache. Fork the repository to your account. At the time of writing this article, I forked it from commit <code class="language-plaintext highlighter-rouge">f19cc5898911d365310df664415c83e4ef8a8c85</code>.</p>

<h2 id="3--get-the-certificates">3- Get the certificates</h2>

<p>In order that our website work with the HTTPS protocol, it is necessary to have an SSL certificate installed, which will be in charge of encrypting the connections between our browser and the server where the website is hosted, so all the information exchanged between them is not accessible.</p>

<p>We won’t delve into how generate this certificate, but you can get it free through <a href="https://letsencrypt.org/">Let’s Encrypt</a> or <a href="https://startssl.com/">StartSSL</a>.</p>

<p>Let’s assume that you already have the certificate and it is called <code class="language-plaintext highlighter-rouge">fullchain.pem</code> and the private key is <code class="language-plaintext highlighter-rouge">privkey.pem</code>. Add these files in a folder in the root path called <code class="language-plaintext highlighter-rouge">ssl</code>. Also, add this folder in the <code class="language-plaintext highlighter-rouge">.gitignore</code>, since this has sensitive information:</p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/ssl-folder.png" alt="" /></p>

<h2 id="4--edit-apache-configuration-files">4- Edit Apache configuration files</h2>

<p>Create a folder <code class="language-plaintext highlighter-rouge">sites-available</code> in the root of the project an add the files <code class="language-plaintext highlighter-rouge">000-default.conf</code> and <code class="language-plaintext highlighter-rouge">default-ssl.conf</code>, with the following content to enable HTTPS in Apache:</p>

<p><strong>000-default.conf</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Directory /app/public/&gt;
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
&lt;/Directory&gt;

&lt;VirtualHost *:80&gt;
        ServerAdmin webmaster@localhost
        DocumentRoot /app/public

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p><strong>default-ssl.conf</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IfModule mod_ssl.c&gt;
	&lt;VirtualHost _default_:443&gt;
		ServerAdmin webmaster@localhost

		DocumentRoot /app/public

		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

		SSLEngine on

        SSLCertificateFile /var/imported/ssl/fullchain.pem
		SSLCertificateKeyFile /var/imported/ssl/privkey.pem

		&lt;FilesMatch "\.(cgi|shtml|phtml|php)$"&gt;
				SSLOptions +StdEnvVars
		&lt;/FilesMatch&gt;
		&lt;Directory /usr/lib/cgi-bin&gt;
				SSLOptions +StdEnvVars
		&lt;/Directory&gt;
	&lt;/VirtualHost&gt;
&lt;/IfModule&gt;
</code></pre></div></div>

<h2 id="5--configure-docker-compose"><a href="#header-2"></a>5- Configure Docker Compose</h2>

<p>Create the <code class="language-plaintext highlighter-rouge">Dockerfile</code> file, which will define our Docker image base, as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM yiisoftware/yii-php:8.0-apache

RUN a2enmod rewrite
RUN a2enmod ssl

RUN a2ensite default-ssl

EXPOSE 80
EXPOSE 443
</code></pre></div></div>

<p>As you can see above, we start from the original image of the project and then we enable the SSL to Apache.</p>

<p>You also have to edit the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> as following:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
    <span class="na">php</span><span class="pi">:</span>
        <span class="na">build</span><span class="pi">:</span>
          <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
          <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
        <span class="na">working_dir</span><span class="pi">:</span> <span class="s">/app</span>
        <span class="na">volumes</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">./:/app</span>
            <span class="c1"># host-volume for composer cache</span>
            <span class="pi">-</span> <span class="s">~/.composer-docker/cache:/root/.composer/cache:delegated</span>
            <span class="pi">-</span> <span class="s">./ssl:/var/imported/ssl</span>
            <span class="pi">-</span> <span class="s">./sites-available:/etc/apache2/sites-available</span>
        <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s1">'</span><span class="s">80:80'</span>
            <span class="pi">-</span> <span class="s1">'</span><span class="s">443:443'</span>
</code></pre></div></div>

<p>In this way, the files that were created before and that allow the operation of HTTPS on the server are passed to the container.</p>

<h2 id="6--run-the-website"><a href="#header-2"></a>6- Run the website</h2>

<p>Finally, you need to fire up the containers running the command below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d
</code></pre></div></div>

<p>In case it is the first time you run, install the project libraries with composer:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose exec php composer install
</code></pre></div></div>

<p>Now you can test with the browser, accessing the site both HTTP and HTTPS:</p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/http.png" alt="" /></p>

<p><img src="https://evavillarrealguzman.github.io/img/https-con-docker-y-apache/https.png" alt="" /></p>

:ET